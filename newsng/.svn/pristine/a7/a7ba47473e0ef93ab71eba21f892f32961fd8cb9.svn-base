package sng.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.springframework.cglib.beans.BeanMap;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.FileSystemXmlApplicationContext;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import sng.constant.Consts;
import sng.dao.ApplyDao;
import sng.dao.BaseDaoEx;
import sng.dao.StudentDao;
import sng.entity.Plan;
import sng.entity.StudentClass;
import sng.pojo.PlanClassVo;
import sng.pojo.SessionInfo;
import sng.pojo.base.Student;
import sng.util.CommonUtils;
import sng.util.Paging;

/**
 * 报名
 * @author s
 *
 */
@Service
@Transactional
public class ApplyServiceImpl {
	@Resource
	private BaseDaoEx baseDaoEx;
	@Resource
	private ApplyDao applyDao;
	@Resource
	private PlanServiceImpl planServiceImpl;
	
	/**
	 * 招生计划列表-家长报名
	 */
	@Transactional(propagation=Propagation.NOT_SUPPORTED,readOnly=true)
	public List<Plan> getPlanList(SessionInfo sessionInfo) {
		int orgId=sessionInfo.getOrgId();
		Integer userId=sessionInfo.getUserId();//当前登录者
		Map<String,Object> params=new HashMap<>();
		StringBuffer sb=new StringBuffer();
		sb.append(" select title,begin_time as beginTime,end_time as endTime,content,class_type as classType from plan where is_del=0 and plan_switch=1 and org_id=:orgId ");
		sb.append(" order by end_time desc ");
		params.put("orgId", orgId);
		
		List<Plan> planList=baseDaoEx.queryListBySql(sb.toString(),Plan.class, params);
		List<Plan> list=new ArrayList<>();
		Integer studId=null;
		if(userId!=null) {//不为空时 则是登录用户
			Map<String,Object> studMap=this.queryStudent(userId);
			studId=(Integer)studMap.get("stud_id");
		}
		for(Plan p : planList) {
			int planId=p.getPlanId();
			int classType=p.getClassType();
			p=CommonUtils.generateBean(p, "beginTimeStr","endTimeStr","applyClassCount");
			BeanMap beanMap=BeanMap.create(p);
			beanMap.put("beginTimeStr", CommonUtils.dateFormat(p.getBeginTime(), null));
			beanMap.put("endTimeStr", CommonUtils.dateFormat(p.getEndTime(), null));
			
			if(studId!=null) {//登录用户
				//如果是老生班，则判断当前学生在不在此班，如果在则显示此班所对应的计划
				if(classType==1) {//查询当前学生在此计划下的班级列表
					List<Map<String,Object>> classList=this.getClass(planId, studId, "");
					if(classList!=null && classList.size()>0) {
						classList=this.getClass(planId, studId, "2,3,5");
						beanMap.put("applyClassCount", classList.size());
						p=(Plan)beanMap.getBean();
						list.add(p);
					}
				}else {
					List<Map<String,Object>> classList=this.getClass(planId, studId, "2,3,5");
					beanMap.put("applyClassCount", classList.size());
					p=(Plan)beanMap.getBean();
					list.add(p);
				}
			}else {
				beanMap.put("applyClassCount", 0);
				p=(Plan)beanMap.getBean();
				list.add(p);
			}
		}
		
		return list;
	}
	
	/**
	 * 通过家长userId查询学生信息
	 */
	private Map<String,Object> queryStudent(int userId) {
		Map<String,Object> params=new HashMap<>();
		StringBuffer sb=new StringBuffer();
		sb.append(" select b.stud_id,c.stud_name,stud_card,birthday from edugate_base.parent a,edugate_base.student2parent b,edugate_base.student c ");
		sb.append(" where a.parent_id=b.parent_id and b.stud_id=c.stud_id ");
		sb.append(" and a.is_del=0 and b.is_del=0 and c.is_del=0 and b.is_main=1 and a.user_id=:userId  ");
		params.put("userId", userId);
		List<Map<String,Object>> list=(List)baseDaoEx.queryListBySql(sb.toString(), params);
		if(list!=null && list.size()>0) {
			return list.get(0);
		}
		return null;
	}
	
	/**
	 * 查询当前学生在此计划下的班级列表
	 */
	@Transactional(propagation=Propagation.NOT_SUPPORTED,readOnly=true)
	public List<Map<String,Object>> getClass(int planId,int studId,String stuStatus) {
		Map<String,Object> params=new HashMap<>();
		StringBuffer sb=new StringBuffer();
		sb.append(" select a.clas_id,clas_name from classes a,student_class b where a.is_del=0 and b.is_del=0 and a.clas_id=b.clas_id ");
		if(!StringUtils.isBlank(stuStatus)) {
			sb.append(" b.stu_status in("+stuStatus+") ");
		}
		sb.append(" and a.plan_id=:planId and b.stud_id=:studId");
		params.put("planId", planId);
		params.put("studId", studId);
		List<Map<String,Object>> classList=baseDaoEx.queryListBySql(sb.toString(), params);
		return classList;
	}
	
	/**
	 * 按计划获取班级-用于报名
	 */
	@Transactional(propagation=Propagation.NOT_SUPPORTED,readOnly=true)
	public Paging getPageClass(SessionInfo sessionInfo,Integer pageNo,Integer limit,Map<String,Object> paramMap) {
		int orgId=sessionInfo.getOrgId();
		int planId=(Integer)paramMap.get("planId");
		Integer subjectId=(Integer)paramMap.get("subjectId");
		String classWeek=(String)paramMap.get("classWeek");
		List<Object> params=new ArrayList<>();
		StringBuffer sb=new StringBuffer();
		sb.append(" select a.clas_id as classId,a.clas_name as className,a.clas_type as classType,a.class_start_date as classStartDate,a.class_begin_time as classBeginTime,a.class_over_time as classOverTime, ");
		sb.append(" a.age_range as ageRange,a.usable_num as usableNum,class_unset_time as classUnsetTime, ");
		sb.append(" a.class_week as classWeek,a.size as classSize,a.tuition_fees as tuitionFees,a.ss_num as appplyCount, ");
		sb.append(" b.cam_name as camName,c.classroom_name as classroomName,c.building,c.floor ");
		sb.append(" from classes a  ");
		sb.append(" left join campus b on a.cam_id=b.cam_id  ");
		sb.append(" left join classroom c on a.classroom_id=c.classroom_id ");
		sb.append(" where a.is_del=0 and b.is_del=0 and c.is_del=0 and a.org_id=? and plan_id=? ");
		params.add(orgId);
		params.add(planId);
		if(subjectId!=null) {
			sb.append(" and a.subject_id=? ");
			params.add(subjectId);
		}
		if(!StringUtils.isBlank(classWeek) && !"8".equals(classWeek)) {
			sb.append(" and a.class_week=? ");
			params.add(classWeek);
		}
		String countSql="select count(*) from ("+sb.toString()+") t";
		sb.append(" order by a.clas_name ");
		
		Paging paging=baseDaoEx.queryPageBySql(sb.toString(), countSql, pageNo, limit, PlanClassVo.class, params);
		List<PlanClassVo> planClassVoList=paging.getData();
		List<PlanClassVo> voList=new ArrayList<>();
		for(PlanClassVo vo : planClassVoList) {
			String classId=vo.getClassId();
			
			String _classType=vo.getClassType();
			String classTypeStr=Consts.CLASS_TYPE_MAP.get(_classType);
			vo.setClassTypeStr(classTypeStr);
			
			String _classWeek=vo.getClassWeek();
			String classWeekStr=Consts.WEEK_MAP.get(_classWeek);
			vo.setClassWeekStr(classWeekStr);
			
			String classStartDateStr=CommonUtils.dateFormat(vo.getClassStartDate(), "yyyy-MM-dd");
			vo.setClassStartDateStr(classStartDateStr);
			
			String classBeginTimeStr=CommonUtils.dateFormat(vo.getClassBeginTime(),"HH:mm");
			vo.setClassBeginTimeStr(classBeginTimeStr);
			
			String classOverTimeStr=CommonUtils.dateFormat(vo.getClassOverTime(),"HH:mm");
			vo.setClassOverTimeStr(classOverTimeStr);
			
			//查询教师
			params=new ArrayList<>();
			sb=new StringBuffer();
			sb.append(" select a.tech_name from edugate_base.teacher a,teacher_class b where a.is_del=0 and b.is_del=0 and a.tech_id=b.tech_id ");
			sb.append(" and b.clas_id=? ");
			params.add(classId);
			List<Map<String,Object>> techNameList=baseDaoEx.queryListBySql(sb.toString(), params);
			String teachers="";
			for(Map<String,Object> map : techNameList) {
				String techName=(String)map.get("tech_name");
				if(!StringUtils.isBlank(techName)) {
					teachers+=techName+",";
				}
			}
			if(!StringUtils.isBlank(teachers)) {
				teachers=teachers.substring(0,teachers.length()-1);
			}
			vo.setTeachers(teachers);
			
			//查询学员班级关系表
			String isApply="0";
			params=new ArrayList<>();
			sb=new StringBuffer();
			sb.append("select stu_status as stuStatus from student_class where is_del=0 and stu_status in(2,3,5) and clas_id=?");
			params.add(classId);
			List<StudentClass> studentClassList=baseDaoEx.queryListBySql(sb.toString(), StudentClass.class, params);
			if(studentClassList!=null && studentClassList.size()>0) {
				isApply="1";//已报名
			}
			vo.setIsApply(isApply);
			
			voList.add(vo);
		}
		paging.setData(voList);
		return paging;
	}
	

	@Transactional(propagation=Propagation.NOT_SUPPORTED,readOnly=true)
	public Plan getPlanInfo(int planId) {
		Plan plan=planServiceImpl.getPlanInfo(planId);
		return plan;
	}
}
