package sng.dao.impl;

import java.util.List;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.transform.Transformers;
import org.springframework.stereotype.Repository;

import sng.dao.ChargeDao;
import sng.entity.Account;
import sng.entity.Charge;
import sng.util.Constant;


/**
 * Title: ChargeDaoImpl
 * Description: 
 * Company: 世纪伟业
 * @author Liuyang
 * @date 2018年1月4日下午12:05:20
 */
@Repository
public class ChargeDaoImpl extends BaseDaoImpl<Charge> implements ChargeDao{

	@Override
	public Charge getCharge(Integer org_id, Integer cam_id, Integer clas_id) {
		Session session = this.factory.getCurrentSession();
		String sql = " SELECT c.cid,c.start_time,c.end_time,c.order_prefix,c.money,c.pay_type,c.item,c.accId FROM charge c WHERE c.org_id=:org_id AND c.cam_id=:cam_id AND c.clas_id=:clas_id AND c.is_del=:is_del ";
		Query query = session.createSQLQuery(sql);
		query.setResultTransformer(Transformers.aliasToBean(Charge.class));
		query.setInteger("org_id", org_id);
		query.setInteger("cam_id", cam_id);
		query.setInteger("clas_id", clas_id);
		query.setInteger("is_del", Constant.IS_DEL_NO);
		@SuppressWarnings("unchecked")
		List<Charge> list = query.list();
		if(null!=list&&list.size()!=0){
			return list.get(0);
		}else{
			return new Charge();
		}
	}
	

	@SuppressWarnings("unchecked")
	@Override
	public List<Account> getCEBList() {
		Session session = this.factory.getCurrentSession();
		String sql = " SELECT a.org_id,a.billNum,a.fileNum FROM account a WHERE a.accType=:accType AND a.is_del=0 GROUP BY a.fileNum ";
		Query query = session.createSQLQuery(sql);
		query.setInteger("accType", Constant.ACCTYPE_CEB);
		query.setResultTransformer(Transformers.aliasToBean(Account.class));
		return query.list();
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<Charge> getTList(Integer term_id,Integer teacher_id) {
		Session session = this.factory.getCurrentSession();
		String sql = " SELECT c.cid,cl.term_id,c.ss_money,ca.category_name,s.subject_name,cl.clas_name,cl.class_week,cl.class_unset_time,cl.class_begin_time,cl.class_over_time,cp.cam_name,cr.building,cr.classroom_name,c.st_money FROM charge c INNER JOIN classes cl ON c.clas_id=cl.clas_id AND cl.cam_id=c.cam_id AND cl.org_id=c.org_id AND cl.is_del=0  INNER JOIN category ca ON ca.category_id=cl.category_id AND ca.org_id=c.org_id AND ca.org_id=cl.org_id AND ca.is_del=0  INNER JOIN `subject` s ON s.category_id=ca.category_id AND s.category_id=cl.category_id AND s.subject_id=cl.subject_id AND s.org_id=c.org_id AND s.org_id=cl.org_id AND s.org_id=ca.org_id AND s.is_del=0  INNER JOIN classroom cr ON cr.cam_id=cl.cam_id AND cr.cam_id=c.cam_id AND cr.classroom_id=cl.classroom_id AND cr.is_del=0  INNER JOIN campus cp ON cp.cam_id=c.cam_id AND cp.cam_id=cl.cam_id AND cp.cam_id=cr.cam_id AND cp.org_id=c.org_id AND cp.org_id=cl.org_id AND cp.org_id=ca.org_id AND cp.org_id=s.org_id AND cp.is_del=0 INNER JOIN teacher_class tc ON tc.clas_id=c.clas_id AND tc.clas_id=cl.clas_id AND tc.is_del=0 WHERE 1=1 ";
		if(null!=term_id){
			sql += " AND cl.term_id=:term_id  ";
		}
		if(null!=teacher_id){
			sql += " AND tc.tech_id=:tech_id  ";
		}
		Query query = session.createSQLQuery(sql);
		query.setInteger("term_id", term_id);
		query.setInteger("tech_id", teacher_id);
		query.setResultTransformer(Transformers.aliasToBean(Charge.class));
		return query.list();
	}
}
