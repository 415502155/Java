/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.bestinfo.gambler.swing;

import com.bestinfo.arithmetic.CaTool;
import com.bestinfo.arithmetic.DataChange;
import com.bestinfo.arithmetic.NewSign;
import static com.bestinfo.arithmetic.NewSign.MD5Encode;
import com.bestinfo.define.system.SendType;
import com.bestinfo.gambler.all.HttpSend;
import com.bestinfo.gambler.all.HttpUtil;
import com.bestinfo.gambler.all.StaticFile;
import com.bestinfo.gambler.all.StaticVariable;
import com.bestinfo.gambler.completedata.TransmissionThread;
import com.bestinfo.gambler.createBetNumber.SerialNo;
import com.bestinfo.gambler.protocols.ActionID;
import com.bestinfo.gambler.rsasign.Base64Utils;
import com.bestinfo.gambler.rsasign.CertificateUtils;
import com.bestinfo.gambler.rsasign.HPRSATester;
import static com.bestinfo.gambler.rsasign.RSATester.getGyKey;
import com.bestinfo.gambler.rsasign.RSAUtils;
import com.bestinfo.protocols.bet.PBetSchemeResponse;
import com.bestinfo.protocols.client.users.PRoleLoginClient;
import com.bestinfo.protocols.message.APPMessage;
import com.bestinfo.protocols.message.AppHeader;
import com.bestinfo.protocols.users.UserLoginReq;
import com.bestinfo.protocols.users.UserLoginReqRes;
import com.bestinfo.protocols.util.AppHeaderUtil;
import com.bestinfo.protocols.xml.client.XmlFactoryClient;
import com.bestinfo.util.FileUtil;
import com.sun.org.apache.xerces.internal.impl.dv.util.Base64;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.log4j.Logger;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

/**
 *
 * 电话投注线下灌票数据到数据库
 */
public class NewJFrame extends javax.swing.JFrame {

    private static final Logger logger = Logger.getLogger(NewJFrame.class);
    AppHeader head;

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jFileChooser1 = new javax.swing.JFileChooser();
        jComboBox1 = new javax.swing.JComboBox();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 421, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 280, Short.MAX_VALUE)
        );

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("sdddddddddddddd");
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        jButton1.setText("Login");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        jButton2.setText("确认投注");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jFileChooser1.setControlButtonsAreShown(false);
        jFileChooser1.setCurrentDirectory(new java.io.File("F:\\request"));
        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        jComboBox1.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        jButton3.setText("初始化代理商");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("jButton4");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(115, 115, 115)
                        .addComponent(jButton4))
                    .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private static final String KEY_STORE = "PKCS12";//keystore格式  PKCS12

    /**
     * *
     * 登录
     *
     * @param evt
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        File dir = new File("");
        String path = dir.getAbsolutePath();//获取当前文件运行的目录
        String[] splitpath = path.split("\\\\");
        StringBuffer sbpath = new StringBuffer();
        String gml = sbpath.append(splitpath[0] + "\\").toString();//盘符

        Properties props = new Properties();
        InputStream in = null;
        //String filePath =gml+"gamblerClient\\config\\conf.properties";
        String filePath = path + "\\" + "config\\conf.properties";
        String terminalId = "";
        String mobile = "";
        String sendtype = "";
        String user = "";
        String pass = "";

        String keyStorePath = "";
        String keyStorePassword = "";
        String alias = "";
        String aliasPassword = "";

        String SignTheCheck = "";
        try {//读取属性文件内容
            in = new BufferedInputStream(new FileInputStream(filePath));
            //props.load(new InputStreamReader(NewJFrame.class.getClassLoader().getResourceAsStream(filePath), "UTF-8"));        
            props.load(in);
            StaticVariable.SERVERURL = props.getProperty("serverUrl");
            terminalId = props.getProperty("terminalId");
            mobile = props.getProperty("mobile");
            sendtype = props.getProperty("sendtype");
            SignTheCheck = props.getProperty("SignTheCheck");
            StaticFile.SignTheCheck = SignTheCheck;
            logger.info("serverUrl" + StaticVariable.SERVERURL + "terminalId:" + terminalId + "mobile:" + mobile + "sendtype:" + sendtype);
            //jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "aaa", "bbb", "ccc" }));
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                in.close();//-----------------------------------important
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
        AppHeader head = new AppHeader();
        PublicKey pk = null;
        String CertificateAddress = "";
        String DealerCertificateAddress = "";
        String dealerId = "";
        //初始化文件，获取代理商ID
        Properties pro = new Properties();
        InputStream ins = null;
        //String dealerFilePath =gml+"gamblerClient\\config\\dealer.properties";
        String dealerFilePath = path + "\\" + "config\\dealer.properties";
        try {
            ins = new BufferedInputStream(new FileInputStream(dealerFilePath));
            pro.load(ins);
            String xgORhp = jComboBox1.getSelectedItem().toString();
            if (xgORhp == null) {
                JOptionPane.showMessageDialog(this, "请初始化代理商！");
            }
            logger.info("xgORhp:" + xgORhp);
            head.setType(Integer.parseInt(sendtype));//head.setType(1);//发送方类型
            head.setAction(ActionID.GAMBLER_LOGIN);//协议编号
            head.setVersion(0);//version版本号(填0)
            dealerId = pro.getProperty(xgORhp);
            logger.info("sssssssssssss:" + dealerId);
            StaticFile.dealerId = dealerId;
            ins.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                ins.close();//-----------------------------------important
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
        //获取代理商ID的证书信息
        Properties dpro = new Properties();
        InputStream dealerins = null;
        //String dealerIDFilePath =gml+"gamblerClient\\config\\"+dealerId+".properties";
        String dealerIDFilePath = path + "\\config\\" + dealerId + ".properties";
        try {//new String(XGkeyStorePath.getBytes("ISO-8859-1"),"utf-8");
            dealerins = new BufferedInputStream(new FileInputStream(dealerIDFilePath));
            dpro.load(dealerins);
            DealerCertificateAddress = dpro.getProperty("DealerCertificateAddress");
            DealerCertificateAddress = new String(DealerCertificateAddress.getBytes("ISO-8859-1"), "utf-8");
            CertificateAddress = dpro.getProperty("CertificateAddress");
            CertificateAddress = new String(CertificateAddress.getBytes("ISO-8859-1"), "utf-8");
            keyStorePath = dpro.getProperty("keyStorePath").trim();
            keyStorePath = new String(keyStorePath.getBytes("ISO-8859-1"), "utf-8");
            keyStorePassword = dpro.getProperty("keyStorePassword").trim();
            alias = dpro.getProperty("alias").trim();
            aliasPassword = dpro.getProperty("aliasPassword").trim();
            logger.info("keyStorePath:" + keyStorePath + "keyStorePassword:" + keyStorePassword + "alias:" + alias);
            user = dpro.getProperty("user");
            pass = dpro.getProperty("pass");
            StaticFile.DealerCertificateAddress = DealerCertificateAddress;
            StaticFile.CertificateAddress = CertificateAddress;
            StaticFile.keyStorePath = keyStorePath;
            StaticFile.keyStorePassword = keyStorePassword;
            StaticFile.alias = alias;
            StaticFile.aliasPassword = aliasPassword;
            dealerins.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                dealerins.close();//-----------------------------------important
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
        try {
            //String dealerId=jTextField1.getText();
            if (dealerId == null || dealerId.isEmpty()) {
                JOptionPane.showMessageDialog(this, "dealerId is null or isEmpty,Please entry dealerId!");
                return;
            }
            int dealerID = Integer.parseInt(dealerId);
            head.setDealer_id(dealerId);//head.setDealer_id("111");//运营商ID
            head.setTerminal_id(Integer.parseInt(terminalId));//head.setTerminal_id("111");//终端机号
            head.setMobile(mobile);//手机号(填0)head.setMobile("15101105612");
            head.setPhone(mobile);//电话号码(填0)   head.setPhone("15101105612");
            head.setSent_time(new Date().toString());//发送时间head.setSent_time("2015-07-29 12:12:12");
            // head.setBody_sign(new byte[0]);//head.setSign("1231321".getBytes());//报文体签名
            StaticVariable.head = head;
            //组装报文内容<pkgC>
            UserLoginReq ur = new UserLoginReq();

            CaTool ct = new CaTool();
            DataChange dc = new DataChange();
            pk = ct.getPublicKey(CertificateAddress);
            String publickey = Base64Utils.encode(pk.getEncoded());
//            System.err.println("pk:"+pk+".publickey:"+publickey);
//            logger.info("dealerId:"+dealerId+"CertificateAddress:"+CertificateAddress);                  
            byte[] bname = user.getBytes("UTF-8");
            byte[] bpwd = pass.getBytes();
            byte[] name_enc = ct.encryptByPublicKey(bname, pk);
            byte[] pwd_enc = ct.encryptByPublicKey(bpwd, pk);
            String sname = dc.bytes2HexString(name_enc);
            String spwd = dc.bytes2HexString(pwd_enc);
            ur.setGamblerName(sname);
            ur.setGamblerPwd(spwd);
            PRoleLoginClient login = new PRoleLoginClient();

            //把报文转换成XML
            String userxml = login.generateXML(head, ur);
            //拼接发送XML
            String xml = "action=" + ActionID.GAMBLER_LOGIN + "&" + userxml;
            System.out.println("拼接发送XML:" + xml);
            //发送xml并取回回复XML
            String responsexml = HttpSend.httpSend(StaticVariable.SERVERURL, xml);
            // String responsexml = HttpUtil.httpSend(xml, StaticVariable.SERVERURL, true);//StaticVariable.SERVERURL服务器地址
            if (responsexml == null || responsexml.isEmpty()) {
                return;
            }
            //解析XML
            APPMessage ap = login.parseXML(responsexml);
            // APPMessage ap = XmlFactoryClient.getInstance().getAppClientXF(ActionID.GAMBLER_LOGIN).parseXML(responsexml);
            //回复报文
            UserLoginReqRes tbrr = (UserLoginReqRes) ap.getContent();//得到返回内容
            int resultcode = tbrr.getAppResResult().getResultCode();
            System.out.println("KEY:" + tbrr.getSession_key());
            if (dealerID == 151) {
                StaticVariable.privateKey = CertificateUtils.getPrivateKey(keyStorePath, alias, aliasPassword);
            } else {
                StaticVariable.privateKey = this.getPrivateKey(keyStorePath, keyStorePassword, alias, aliasPassword);
            }
            try {
                System.err.println("keyStorePath：" + keyStorePath + "|keyStorePassword:" + keyStorePassword + "|alias:" + alias + "|aliasPassword:" + aliasPassword);
                String privatekey = Base64Utils.encode(StaticVariable.privateKey.getEncoded());
                System.err.println("StaticVariable:" + StaticVariable.privateKey + ".private:" + privatekey);
            } catch (Exception e) {
                logger.info("ex:", e);
                return;
            }
            //输出结果
            if (resultcode == 0) {
                byte[] b_s_key = Base64.decode(tbrr.getSession_key());//dc.hexString2Bytes(tbrr.getSession_key()) ;
                byte[] pwd_dec = ct.decryptByPrivateKey(b_s_key, StaticVariable.privateKey);
                logger.info("返回sessionKey: " + Base64.encode(pwd_dec));
                StaticVariable.SESSION = Base64.encode(pwd_dec);
                System.out.println("操作成功" + resultcode + "\t" + tbrr.getAppResResult().getResultDes());
            } else {
                System.out.println(resultcode + "\t" + tbrr.getAppResResult().getResultDes());
            }
            JOptionPane.showMessageDialog(this, "返回码:" + resultcode + "结果:" + tbrr.getAppResResult().getResultDes(), "操作", JOptionPane.INFORMATION_MESSAGE);
        } catch (UnsupportedEncodingException ex) {
            java.util.logging.Logger.getLogger(UserLogin.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    public AppHeader getHead() {
        AppHeader header = StaticVariable.head;
        String sendtype = header.getType() + "";
        String typeSelect = sendtype;
        System.out.println("typeSelect is " + typeSelect);
        String dealerId = header.getDealer_id();//"161";
        String dealer_idS = dealerId;
        String mobile = header.getMobile();//"15101105612";
        String mobileS = mobile;
        String phoneS = mobile;
        String terminalId = header.getTerminal_id() + "";//"100";
        AppHeader head = new AppHeader();
        head.setType(Integer.parseInt(typeSelect));
        head.setAction(ActionID.SCHEMES_BET_SH);//协议编号
        head.setVersion(0);//version版本号(填0)
        head.setDealer_id(dealer_idS);
        head.setTerminal_id(Integer.parseInt(terminalId));
        head.setMobile(mobileS);
        head.setPhone(phoneS);
        // head.setBody_sign("1231321".getBytes());
        head.setSent_time(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
        return head;
    }

    public static String generateXML(AppHeader header) {
        try {
            // logger.info("进入client---------");
            Element pkgH = AppHeaderUtil.toXML(header);
            Document document = DocumentHelper.createDocument();
            Element root = document.addElement("pkg");
            root.add(pkgH);
            return document.asXML();
        } catch (Exception ex) {
            logger.error("generate scheme bet error:", ex);
            return null;
        }

    }

    /**
     * *
     * 投注
     *
     * @param evt
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String SignTheCheck = StaticFile.SignTheCheck;
        int isCheck = Integer.parseInt(SignTheCheck);
        AppHeader header = getHead();
        if (header == null) {
            logger.info("Please Log In!");
            return;
        }
        String chooseFileParhs = "";
        jFileChooser1.setFileSelectionMode(JFileChooser.FILES_ONLY); //只能选择文件 1为只能选择文件夹  2为文件夹或文件
        File file = jFileChooser1.getSelectedFile();//获取选中文件
        if (file == null) {
            JOptionPane.showMessageDialog(this, "Please Choose File");
            return;
        }
        if (file.isDirectory()) {
            JOptionPane.showMessageDialog(this, "Please Choose File");
            return;
        } else if (file.isFile()) {
            chooseFileParhs = file.getAbsolutePath();
        }
        String[] directoryUrl = chooseFileParhs.split("\\\\");
        StringBuffer sbdir = new StringBuffer();
        for (int i = 0; i < directoryUrl.length - 1; i++) {
            sbdir.append(directoryUrl[i] + "\\");
        }
        String dirUrl = sbdir.toString();//获取文件夹路径
        logger.info("dirUrl:" + dirUrl);
        String fn = jFileChooser1.getSelectedFile().getName();
        String dealerName = "";
        String gameName = "";
        String drawName = "";
        if (fn == null) {
            JOptionPane.showMessageDialog(this, "Please Choose File");
            return;
        } else if (fn.contains("_") == true) {
            String[] arr = fn.split("_");
            dealerName = arr[0];
            gameName = arr[1];
            drawName = arr[2];
        } else {
            JOptionPane.showMessageDialog(this, "Incorrect file name format !");
            return;
        }
        logger.info("dealerName:" + dealerName + "gameName:" + gameName + "drawName:" + drawName);
        //String aDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss:SSS").format(new Date());
        if (header.getType() == SendType.PHONE) {
            String header1 = generateXML(header);//要去掉先去</pkg>最后再加
            String header2 = header1.substring(0, header1.length() - 6);
            PBetSchemeResponse tbrr = null;
            int resultcode = -1;//返回的状态码，0为成功
            int num = 0;//记录投注成功数量，初始化为0
            int failednum = 0;//记录投注失败的数量
            try {
                String FilePath = chooseFileParhs;
                logger.info("FilePath:" + FilePath);
                String FailedFilePath = dirUrl + "Fail_" + dealerName + "_" + gameName + "_" + drawName + ".xml";
                String ErrorFilePath = dirUrl + "Error_" + dealerName + "_" + gameName + "_" + drawName + ".log";

                StaticFile.dealerName = dealerName;
                StaticFile.gameName = gameName;
                StaticFile.drawName = drawName;

                File f = FileUtil.getFile(FilePath);

                //读取文件内容
                String allString = FileUtil.getFileContent(f);

                String privateKey1 = "";
                String publicKey1 = "";
                int id = Integer.parseInt(StaticFile.dealerId);
                System.err.println("dddddddddd:" + StaticFile.dealerId);
                if (id == 151) {
                    privateKey1 = CertificateUtils.getPKEY(StaticFile.keyStorePath, StaticFile.alias, StaticFile.aliasPassword);
                    publicKey1 = getGyKey(StaticFile.DealerCertificateAddress);
                } else {
                    System.err.println(StaticFile.keyStorePath + "|" + StaticFile.keyStorePassword + "|" + StaticFile.alias + "|" + StaticFile.aliasPassword);
                    privateKey1 = HPRSATester.getSyKey(StaticFile.keyStorePath, StaticFile.keyStorePassword, StaticFile.alias, StaticFile.aliasPassword);
                    publicKey1 = HPRSATester.getGyKey(StaticFile.DealerCertificateAddress);
                }
                System.err.println("SY:" + privateKey1);
                System.err.println("GY:" + publicKey1);

                if (isCheck == 0) {
                    //获取选中文件的签名文件
                    String SignFilePath = dirUrl + dealerName + "_" + gameName + "_" + drawName + "_data_sign" + ".xml";//161_双色球_2017008_data_sign 
                    logger.info("FailedFilePath:" + FailedFilePath + "ErrorFilePath:" + ErrorFilePath + "SignFilePath:" + SignFilePath);
                    File fsign = FileUtil.getFile(SignFilePath);
                    if (fsign == null) {
                        JOptionPane.showMessageDialog(this, "缺少签名文件");
                        return;
                    }
                    String sign = FileUtil.getFileContent(fsign);
                    if (sign == null || sign.length() == 0) {
                        FileUtil.deleteFile(SignFilePath);
                    }
                    int did = Integer.parseInt(StaticFile.dealerId);
                    if (did == 151) {
                        try {
                            byte[] body_enc = MD5Encode(allString);
                            byte[] encodedData = RSAUtils.encryptByPrivateKey(body_enc, privateKey1);
                            System.out.println("加密后：" + encodedData);
                            String data = Base64Utils.encode(encodedData);
                            if (data.equals(sign)) {
                                System.err.println("签名验证成功");
                            } else {
                                JOptionPane.showMessageDialog(this, "签名文件校验不通过");
                                return;
                            }
                        } catch (Exception e) {
                            logger.info("sisn verify exception:", e);
                            JOptionPane.showMessageDialog(this, "签名文件校验异常");
                            return;
                        }
                    } else {
                        try {
                            byte[] body_enc = MD5Encode(allString);
                            byte[] encodedData = RSAUtils.encryptByPrivateKey(body_enc, privateKey1);
                            System.out.println("加密后：" + encodedData);
                            byte[] decodedData = RSAUtils.decryptByPublicKey(encodedData, publicKey1);
                            System.out.println("解密后：" + new String(decodedData));
                            boolean status = RSAUtils.verify(encodedData, publicKey1, sign);
                            System.err.println("签名验证结果：" + status);
                            if (status == false) {
                                JOptionPane.showMessageDialog(this, "签名文件校验不通过");
                                return;
                            }
                        } catch (Exception e) {
                            logger.info("sisn verify exception:", e);
                            JOptionPane.showMessageDialog(this, "签名文件校验异常");
                            return;
                        }
                    }
                }
                String[] xml = allString.split(",");
                Integer len = xml.length;
                StringBuffer sb = new StringBuffer();
                StringBuffer sbLog = new StringBuffer();
                String dealerId = StaticVariable.head.getDealer_id();
                if (len > 0) {//len==-1
                    TransmissionThread tt = new TransmissionThread();
                    tt.setStart(0);
                    tt.setEnd(500);
                    tt.setTotal(len);
                    tt.setXml(allString);
                    tt.setDealerId(dealerId);
                    Thread t = new Thread(tt);
                    t.start();
                } else if (len == -1) {
                    for (int i = 0; i < xml.length; i++) {
                        String requestxml = header2 + xml[i] + "</pkg>";//header未加签名的请求xml
                        byte[] ret_key = NewSign.GetSign(requestxml, StaticVariable.privateKey, StaticVariable.SESSION);
                        header.setBody_sign(ret_key);
                        String hearders = generateXML(header);//添加签名的header
                        String reqCs = xml[i];
                        String requestxmls = hearders.substring(0, hearders.length() - 6) + xml[i] + "</pkg>";//header加签名的请求xml
                        requestxmls = SerialNo.getxml(requestxmls, ActionID.SCHEMES_BET_SH);
                        String responsexml = HttpUtil.httpSend(requestxmls, StaticVariable.SERVERURL, false);
                        if (responsexml == null) {
                            logger.info("responsexml is null.requestxml:" + xml[i] + "this is article:" + i);
                        //sb.append(requestxmls.substring(33, 47));
                            //return;
                        } else if (responsexml.equals("sendError")) {
                            logger.info("responsexml is sendError.requestxml:" + xml[i] + "this is article:" + i);
                        //sb.append(requestxmls.substring(33, 47));
                            //return ;
                        }
                        APPMessage ap = XmlFactoryClient.getInstance().getAppClientXF(ActionID.SCHEMES_BET).parseXML(responsexml);
                        if (ap == null) {
                            logger.info("ap is null,ActionID.SCHEMES_BET is null.requestxml:" + xml[i] + "this is article:" + i);
                            //return ;
                        }
                        tbrr = (PBetSchemeResponse) ap.getContent();
                        resultcode = tbrr.getResult().getResultCode();

                        if (resultcode != 0) {
                            failednum++;
                            logger.error("rescode:" + resultcode + "successnum:" + num + "\failednum:" + failednum + "\tresultDes:" + tbrr.getResult().getResultDes() + "\txml:" + requestxmls);
                            //JOptionPane.showMessageDialog(null, "rescode: " + resultcode + " \tresultDes: " + tbrr.getResult().getResultDes(), "操作", JOptionPane.INFORMATION_MESSAGE);
                            if (resultcode == 1618) {
                                logger.info("resultcode :1618");
                                //return;
                            }
                            String jd = reqCs + ",";
                            sb.append(jd);
                            String log = "rescode:" + resultcode + "successnum:" + num + "\failednum:" + failednum + "\tresultDes:" + tbrr.getResult().getResultDes() + jd;
                            sbLog.append(log);
                            //return;
                        } else {
                            num++;
                            StaticVariable.serino = tbrr.getDealerSerial().trim();
                            StaticVariable.cifer = tbrr.getCipher().replace(" ", "");
                        }
                        logger.info("rescode:" + resultcode + "|tresultDes:" + tbrr.getResult().getResultDes() + "|successnum:" + num + "|failednum:" + failednum + "|txml:" + requestxmls);
                    }
                    if (sb.length() != 0) {//投注失败的请求xml
                        String FailedAllRequest = sb.substring(0, sb.length() - 1);
                        FileOutputStream out = null;
                        try {
                            out = new FileOutputStream(FileUtil.makeNewFile(FailedFilePath)); //  
                            out.write(FailedAllRequest.getBytes());
                            out.close();
                        } catch (FileNotFoundException ex) {
//                        java.util.logging.Logger.getLogger(CreateRequestMapXml.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    if (sbLog.length() != 0) {//投注失败的log
                        String ErrorLog = sbLog.substring(0, sb.length() - 1);
                        FileOutputStream out = null;
                        try {
                            out = new FileOutputStream(FileUtil.makeNewFile(ErrorFilePath)); //  
                            out.write(ErrorLog.getBytes());
                            out.close();
                        } catch (FileNotFoundException ex) {
//                        java.util.logging.Logger.getLogger(CreateRequestMapXml.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    logger.info("sb:" + sb.toString() + "/sbLog:" + sbLog.toString());
                    //return;
                }
            } catch (Exception e) {
                logger.info("button2ActionPerformed ex:" + e + ".The current success number is :" + num + ".The current failed number is :" + failednum);
                //return;
            }
        } else {
            logger.error("发送方类型错误");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFileChooser1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //初始化文件，加载代理商
        File dir = new File("");
        String path = dir.getAbsolutePath();//获取当前文件运行的目录
        logger.info("path::::" + path);
        String[] splitpath = path.split("\\\\");
        StringBuffer sbpath = new StringBuffer();
        String gml = sbpath.append(splitpath[0] + "\\").toString();//盘符
        logger.info("gml::::" + gml);
        Properties props = new Properties();
        InputStream in = null;
        //String filePath =gml+"\\gamblerClient\\config\\dealer.properties";
        String filePath = path + "\\config\\dealer.properties";
        int num = 0;
        List<String> list = new ArrayList<String>();
        try {
            in = new BufferedInputStream(new FileInputStream(filePath));
            props.load(in);
//            String value = props.getProperty("name");    
//            System.out.println("sss"+value);
            Object[] newStr = null;
            Iterator<String> it = props.stringPropertyNames().iterator();
            while (it.hasNext()) {
                num++;
                String key = it.next();
                String value = props.getProperty(key);
                value = new String(value.getBytes("ISO-8859-1"), "utf-8");
                key = new String(key.getBytes("ISO-8859-1"), "utf-8");
                System.out.println(key + ":" + value);
                //list.add(num, value); //list.add("ruby")   
                list.add(key);
            }
            newStr = list.toArray(); //返回一个包含所有对象的指定类型的数组
            //Object [] obj={"11","22","23"};  
            String[] str = new String[newStr.length];
            for (int i = 0; i < newStr.length; i++) {
                //方式一  
                str[i] = newStr[i].toString();
                System.out.println(str[i]);
            }
            System.out.println(str);
            jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(str));
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                in.close();//-----------------------------------important
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        String param = "{'PAGESIZE':'10','PAGENUM':'2'}";
        String url="http://localhost:8090/test/1";
        String responsexml = HttpUtil.httpSend(param, url, false);
        System.err.println("responsexml："+responsexml);
        if("1".equals(responsexml)){
            JOptionPane.showMessageDialog(this, "reward query success");
        }else{
            JOptionPane.showMessageDialog(this, "reward cash failed");
        }
    }//GEN-LAST:event_jButton4ActionPerformed
    public PrivateKey getPrivateKey(String keyStorePath,
            String keyStorePassword, String alias, String aliasPassword) {
        try {
            KeyStore ks = getKeyStore(keyStorePath, keyStorePassword);
            PrivateKey key = (PrivateKey) ks.getKey(alias,
                    aliasPassword.toCharArray());
            return key;
        } catch (Exception e) {
            logger.error("", e);
        }
        return null;
    }

    private KeyStore getKeyStore(String keyStorePath, String password)
            throws Exception {
        FileInputStream is = new FileInputStream(keyStorePath);
        KeyStore ks = KeyStore.getInstance(KEY_STORE);
        ks.load(is, password.toCharArray());
        is.close();
        return ks;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
