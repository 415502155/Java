package sng.controller.web;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.ss.usermodel.Workbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import sng.constant.Consts;
import sng.controller.common.BaseAction;
import sng.pojo.ClassToTeacher;
import sng.pojo.Result;
import sng.pojo.ResultEx;
import sng.pojo.SessionInfo;
import sng.service.ClassService;
import sng.util.Constant;
import sng.util.ExcelExport;
import sng.util.ExcelUtil;
import sng.util.Paging;
/***
 *  @Company sjwy
 *  @Title: PrintExportController.java 
 *  @Description: 打印导出 （教师公开课、班级缴费明细、班级考勤、班级花名册）
 *	@author: shy
 *  @date: 2018年11月20日 上午10:14:12
 */
@Controller
@RequestMapping("/print/export")
public class PrintExportController extends BaseAction {
	
	private final Logger log = LoggerFactory.getLogger(this.getClass());
	@Autowired
	private ClassService classService;
	/***
	 * 
	 *  @Description: 打印导出 班级查询列表
	 *  @param page 页数
	 *  @param limit 每页条目数
	 *  @param orgId 机构id
	 *  @param termId 学期id
	 *  @param clasType 班级类型（新生班、老生班）
	 *  @param categoryId 类别
	 *  @param subjectId 科目
	 *  @param camId 校区
	 *  @param classWeek 上课星期
	 *  @param techNames 教师和班级名称
	 *  @param request
	 *  @return
	 */
	@RequestMapping(value = "/list.htm")
	@ResponseBody
	public Result<?> getClassList(@RequestParam(name = "page", defaultValue = "1") Integer page,
			@RequestParam(name = "limit", defaultValue = Constant.NUM_PER_PCPAGE_STRING) Integer limit,
			Integer org_id, Integer termId, Integer clasType, Integer categoryId,
			Integer subjectId, String camId, Integer classWeek, String techNames,
			HttpServletRequest request) {
		SessionInfo sessionInfo=this.getSessionInfo(request);
		Integer orgId = org_id;
		if (null == orgId) {
			orgId = sessionInfo.getOrgId();
		}
		Paging<ClassToTeacher> pageClastech = new Paging<ClassToTeacher>();
		pageClastech.setPage(page);
		pageClastech.setLimit(limit);
		Paging<ClassToTeacher> paging = null;
		try {
			paging = classService.getClassList(orgId, termId, clasType, categoryId, subjectId, camId, classWeek, techNames, pageClastech);
		} catch (Exception e) {
			log.info("getClassList Ex : " + e);
			e.printStackTrace();
			return ResultEx.error(Constant.ERROR_CODE, Constant.ERROR_MSG, "");
		}
		return ResultEx.success(paging);
	}
	/***
	 * 
	 *  @Description: 统计当前班级的老师所有开课的班级开课时间、学员人数、学费等信息, 以教师分组统计班级上课及学费总额
	 *  @param pageNum
	 *  @param pageSize
	 *  @param orgId
	 *  @param termId
	 *  @param clasType
	 *  @param categoryId
	 *  @param subjectId
	 *  @param camId
	 *  @param classWeek
	 *  @param techNames (按照教师名称和班级名称进行模糊查询)
	 *  @param isAll (是否选择全部分页数据 1:是  其他:否)
	 *  @param ids  班级ids 以英文逗号分隔（1,2,3）
	 *  @return
	 */
	@RequestMapping(value = "/download/statistics.htm")
	@ResponseBody
	public Result<?> downloadStatistics(HttpServletRequest request, HttpServletResponse response,
			Integer org_id, Integer termId, Integer clasType, Integer categoryId,
			Integer subjectId, String camId, Integer classWeek, String techNames, Integer isAll, String ids) {
		SessionInfo sessionInfo=this.getSessionInfo(request);
		Integer orgId = org_id;
		if (null == orgId) {
			orgId = sessionInfo.getOrgId();
		}
		System.out.println("参数：     org_id = " + org_id + "termId = " + termId + "ids = " + ids);
		List<ClassToTeacher> returnList = new ArrayList<ClassToTeacher>();
		List<ClassToTeacher> list = null;
		List<Integer> techIds = new ArrayList<Integer>();//教师id集合
		if (isAll != null && isAll == 1) {//判断 是否选择全部分页数据  1：是   其他：否
			list = classService.getClassList(orgId, termId, clasType, categoryId, subjectId, camId, classWeek, techNames);
			if (null != list && list.size() > 0) {
				for (ClassToTeacher ct : list) {
					String tids = ct.getTech_id();
					if (null != tids) {
						String[] arrTids = tids.split(",");
						for (int i = 0; i < arrTids.length; i++) {
							techIds.add(Integer.parseInt(arrTids[i]));
						}
					}
				}
			}
		} else {
			//班级ids
			if (ids != null) {
				List<ClassToTeacher> clasTechList = classService.getListByClasId(orgId, ids);
				if (null != clasTechList && clasTechList.size() > 0) {
					for (ClassToTeacher ct : clasTechList) {
						String tids = ct.getTech_id();
						System.out.println("教师id =-=== ：" + tids);
						if (null != tids) {
							String[] arrTids = tids.split(",");
							for (int i = 0; i < arrTids.length; i++) {
								System.out.println("教师 ID ：" + arrTids[i]);
								techIds.add(Integer.parseInt(arrTids[i]));
							}
						}
					}
				}
			}
		}
		//去重复的教师id
		techIds = new ArrayList<Integer>(new LinkedHashSet<Integer>(techIds));
		System.out.println(techIds.toString() + "------" + techIds.size());
		if (null != techIds && techIds.size() > 0) {
			for (Integer tid : techIds) {//循环教师
				List<ClassToTeacher> listct = classService.getTechClassInfoList(orgId, tid, termId);
				if (null != listct && listct.size() > 0) {//查看职教老师所教的班级
					ClassToTeacher techer = new ClassToTeacher();
					Integer stuNum = 0;//班级人数
					BigDecimal zsjs = new BigDecimal(0);
					for (ClassToTeacher tech : listct) {
						//写入excel 上课时间 都取不固定时间
						String unset = tech.getClass_unset_time();
						if (null != unset) {
							//tech.setClass_unset_time(unset);
						} else {
							//returnCt.setClass_week_name(Consts.WEEK_MAP.get(ct.getClass_week()));
							//returnCt.setClass_begin_time(ct.getClass_begin_time());
							//returnCt.setClass_over_time(ct.getClass_over_time());
							tech.setClass_unset_time(Consts.WEEK_MAP.get(String.valueOf(tech.getClass_week())) + "(" + tech.getClass_begin_time() + "-" + tech.getClass_over_time() + ")");
						}
						String ssMoney = tech.getSs_money();
						BigDecimal ss = new BigDecimal(ssMoney);
						String stMoney = tech.getSt_money();
						BigDecimal st = new BigDecimal(stMoney);
						BigDecimal sjs = ss.subtract(st);
						tech.setSs_tuition(sjs.toString());
						stuNum = stuNum.intValue()+tech.getNum().intValue();
						zsjs =  sjs.add(zsjs); 
						returnList.add(tech);
						
					}
					//统计某位老师所职教的 教师名称，班级名称（所有职教的班级数） ，学员人数（所有职教班级的总学员数），上课时间，学费总数（所有职教班级的学费总数） 
					techer.setTech_name(listct.get(0).getTech_name() + "总计");//教师名称
					techer.setClas_name(String.valueOf(listct.size()));//班级名称（所有职教的班级数）
					techer.setNum(new BigInteger(stuNum.toString()));//学员人数（所有职教班级的总学员数）
					techer.setClass_unset_time("");
					techer.setSs_tuition(zsjs.toString());//学费总数（所有职教班级的学费总数） 
					returnList.add(techer);
				}
			}
		} else {
			Workbook wb = null;
			try {
				wb = ExcelExport.makeWorkbook("开课统计信息列表", Constant.IMPORT_EXCEL_TECHER_STATISTICS, null, "xls");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			try {
				ExcelUtil.makeAndOutExcelFile(request, response, wb, "开课统计信息列表.xls");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return ResultEx.error(Constant.ERROR_CODE, "没有职教老师的相关信息", "");
		}
		//下载统计
		if (null != returnList && returnList.size() > 0) {
			try {
				classService.downloadStatistics(request, response, returnList);
			} catch (Exception e) {
				log.info("downloadStatistics Ex :" + e);
				e.printStackTrace();
				return ResultEx.error(Constant.ERROR_CODE, Constant.ERROR_MSG, "");
			}
		}
		return ResultEx.success("");
	}
	/***
	 * 
	 *  @Description: 学员缴费记录
	 *  @param request
	 *  @param response
	 *  @param orgId
	 *  @param termId
	 *  @param clasType
	 *  @param categoryId
	 *  @param subjectId
	 *  @param camId
	 *  @param classWeek
	 *  @param techNames
	 *  @param isAll
	 *  @param ids 班级id
	 *  @return
	 */
	@RequestMapping(value = "/download/paymentRecords.htm")
	@ResponseBody
	public Result<?> downloadPaymentRecords(HttpServletRequest request, HttpServletResponse response,
			Integer org_id, Integer termId, Integer clasType, Integer categoryId,
			Integer subjectId, String camId, Integer classWeek, String techNames, Integer isAll, String ids) {
		SessionInfo sessionInfo=this.getSessionInfo(request);
		Integer orgId = org_id;
		if (null == orgId) {
			orgId = sessionInfo.getOrgId();
		}
		try {
			classService.downloadPaymentRecords(request, response, orgId, termId, clasType, categoryId, subjectId, camId, classWeek, techNames, isAll, ids);
		} catch (Exception e) {
			log.info("downloadPaymentRecords Ex :" + e);
			e.printStackTrace();
			return ResultEx.error(Constant.ERROR_CODE, Constant.ERROR_MSG, "");
		}
		return ResultEx.success("");
	}
	/***
	 * 
	 *  @Description: 学员考勤表
	 *  @param request
	 *  @param response
	 *  @param orgId
	 *  @param termId
	 *  @param clasType
	 *  @param categoryId
	 *  @param subjectId
	 *  @param camId
	 *  @param classWeek
	 *  @param techNames
	 *  @param isAll
	 *  @param ids  班级id
	 *  @return
	 */
	@RequestMapping(value = "/download/attendance.htm")
	@ResponseBody
	public Result<?> downloadStudentsAttendance(HttpServletRequest request, HttpServletResponse response,
			Integer org_id, Integer termId, Integer clasType, Integer categoryId,
			Integer subjectId, String camId, Integer classWeek, String techNames, Integer isAll, String ids) {
		SessionInfo sessionInfo=this.getSessionInfo(request);
		Integer orgId = org_id;
		if (null == orgId) {
			orgId = sessionInfo.getOrgId();
		}
		try {
			classService.downloadStudentsAttendance(request, response, orgId, termId, clasType, categoryId, subjectId, camId, classWeek, techNames, isAll, ids);
		} catch (Exception e) {
			log.info("downloadStudentsAttendance Ex : " + e);
			e.printStackTrace();
			return ResultEx.error(Constant.ERROR_CODE, Constant.ERROR_MSG, "");
		}
		return ResultEx.success("");
	}
	/***
	 * 
	 *  @Description: 下载学员花名册
	 *  @param request
	 *  @param response
	 *  @param orgId
	 *  @param termId
	 *  @param clasType
	 *  @param categoryId
	 *  @param subjectId
	 *  @param camId
	 *  @param classWeek
	 *  @param techNames
	 *  @param isAll
	 *  @param ids 班级id
	 *  @return
	 */
	@RequestMapping(value = "/download/studentRoster.htm")
	@ResponseBody
	public Result<?> downloadStudentRoster(HttpServletRequest request, HttpServletResponse response,
			Integer org_id, Integer termId, Integer clasType, Integer categoryId,
			Integer subjectId, String camId, Integer classWeek, String techNames, Integer isAll, String ids) {
		SessionInfo sessionInfo = this.getSessionInfo(request);
		Integer orgId = org_id;
		if (null == orgId) {
			orgId = sessionInfo.getOrgId();
		}
		String status = "5";
		try {
			classService.downloadStudentRoster(request, response, orgId, termId, clasType, categoryId, subjectId, camId, classWeek, techNames, isAll, ids, status);
		} catch (Exception e) {
			log.info("downloadStudentRoster Ex : " + e);
			e.printStackTrace();
			return ResultEx.error(Constant.ERROR_CODE, Constant.ERROR_MSG, "");
		}
		return ResultEx.success("");
	}
	
}
