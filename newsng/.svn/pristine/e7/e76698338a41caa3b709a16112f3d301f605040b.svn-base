package sng.servlet;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.context.support.SpringBeanAutowiringSupport;

import com.fasterxml.jackson.core.type.TypeReference;

import sng.constant.Consts;
import sng.entity.Charge;
import sng.entity.ChargeDetail;
import sng.entity.ChargeRecord;
import sng.pojo.base.Parent;
import sng.pojo.Result;
import sng.service.ChargeDetailService;
import sng.service.ChargeService;
import sng.service.LoggerService;
import sng.service.MQService;
import sng.service.StudentClassService;
import sng.service.TokenService;
import sng.service.impl.ApplyServiceImpl;
import sng.util.Constant;
import sng.util.EnumLog;
import sng.util.HttpClientUtil;
import sng.util.JsonUtil;
import sng.util.PropertyReader;
import unionpay.acp.sdk.AcpService;
import unionpay.acp.sdk.LogUtil;
import unionpay.acp.sdk.SDKConstants;



/**
 * 重要：联调测试时请仔细阅读注释！
 * 
 * 产品：跳转网关支付产品<br>
 * 功能：后台通知接收处理示例 <br>
 * 日期： 2015-09<br>
 * 版本： 1.0.0 
 * 版权： 中国银联<br>
 * 声明：以下代码只是为了方便商户测试而提供的样例代码，商户可以根据自己需要，按照技术文档编写。该代码仅供参考，不提供编码，性能，规范性等方面的保障<br>
 * 该接口参考文档位置：open.unionpay.com帮助中心 下载  产品接口规范  《网关支付产品接口规范》，<br>
 *              《平台接入接口规范-第5部分-附录》（内包含应答码接口规范，全渠道平台银行名称-简码对照表），
 * 测试过程中的如果遇到疑问或问题您可以：1）优先在open平台中查找答案：
 * 							        调试过程中的问题或其他问题请在 https://open.unionpay.com/ajweb/help/faq/list 帮助中心 FAQ 搜索解决方案
 *                             测试过程中产生的6位应答码问题疑问请在https://open.unionpay.com/ajweb/help/respCode/respCodeList 输入应答码搜索解决方案
 *                           2） 咨询在线人工支持： open.unionpay.com注册一个用户并登陆在右上角点击“在线客服”，咨询人工QQ测试支持。
 * 交易说明：	前台类交易成功才会发送后台通知。后台类交易（有后台通知的接口）交易结束之后成功失败都会发通知。
 *			为保证安全，涉及资金类的交易，收到通知后请再发起查询接口确认交易成功。不涉及资金的交易可以以通知接口respCode=00判断成功。
 * 			未收到通知时，查询接口调用时间点请参照此FAQ：https://open.unionpay.com/ajweb/help/faq/list?id=77&level=0&from=0
 */

@SuppressWarnings("serial")
public class BackRcvResponse extends HttpServlet{

	@Autowired
	private ChargeService chargeService;
	@Autowired
	private ChargeDetailService chargeDetailService;
	@Autowired
	private MQService mqService;
	@Autowired
	private TokenService tokenService;
	@Autowired
	private StudentClassService studentClassService;
	@Autowired
	private LoggerService loggerService;
	@Autowired
	private ApplyServiceImpl applyServiceImpl;
	
	private static String ESB_REQUEST_URL = PropertyReader.getCommonProperty("esbRequestUrl");
	
	@Override
	public void init(ServletConfig config) throws ServletException {
		/**
		 * 请求银联接入地址，获取证书文件，证书路径等相关参数初始化到SDKConfig类中
		 * 在java main 方式运行时必须每次都执行加载
		 * 如果是在web应用开发里,这个方法可使用监听的方式写入缓存,无须在这出现
		 */
		//这里已经将加载属性文件的方法挪到了web/AutoLoadServlet.java中
		//SDKConfig.getConfig().loadPropertiesFromSrc(); //从classpath加载acp_sdk.properties文件
		SpringBeanAutowiringSupport.processInjectionBasedOnServletContext(this, config.getServletContext());
		super.init();
	}
	
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		
		LogUtil.writeLog("BackRcvResponse接收后台通知开始");
		
		String encoding = req.getParameter(SDKConstants.param_encoding);
		// 获取银联通知服务器发送的后台通知参数
		//银联DEMO中提供的方法，该方法可能导致req获取为空
		//Map<String, String> reqParam = getAllRequestParamStream(req);
		Map<String, String[]> reqParams = req.getParameterMap();
		
		Map<String, String> reqParam = new HashMap<String, String>();
		for (String key : reqParams.keySet()) {
			reqParam.put(key, reqParams.get(key)[0]);
	    }
		
		LogUtil.printRequestLog(reqParam);

		//重要！验证签名前不要修改reqParam中的键值对的内容，否则会验签不过
		if (!AcpService.validate(reqParam, encoding)) {
			LogUtil.writeLog("验证签名结果[失败].");
			//验签失败，需解决验签问题
		} else {
			LogUtil.writeLog("验证签名结果[成功].");
			//【注：为了安全验签成功才应该写商户的成功处理逻辑】交易成功，更新商户订单状态
		}
		//判断respCode=00、A6后，对涉及资金类的交易，请再发起查询接口查询，确定交易成功后更新数据库。
		String respCode = reqParam.get("respCode");
		if("00".equals(respCode)||"A6".equals(respCode)){
			ChargeRecord cr = new ChargeRecord();
			String txnType = reqParam.get("txnType");
			String txnTime = reqParam.get("txnTime");
			String txnAmt = reqParam.get("txnAmt");
			String reqReserved = reqParam.get("reqReserved");
			String queryId = reqParam.get("queryId");
			String respMsg = reqParam.get("respMsg");
			String settleAmt = reqParam.get("settleAmt");
			String settleDate = reqParam.get("settleDate");
			String traceNo = reqParam.get("traceNo");
			String traceTime = reqParam.get("traceTime");
			String accNo = reqParam.get("accNo");
			
			Base64 base64 = new Base64();
			String str = new String(base64.decode(reqReserved), "UTF-8");
			String[] params = str.split("\\|");
			String cd_id = params[0];
			String user_id = params[1];
			String parent_id = params[2];
			String parent_name = params[3];
			String org_name = params[5];
			String identity = params[7];

			ChargeDetail cd = chargeDetailService.getById(Integer.parseInt(cd_id));
			if(null!=cd&&null!=cd.getCid()){
				Charge charge = chargeService.getById(cd.getCid());
				cd.setOnline_pay(Constant.CHARGE_DETAIL_STATUS_OK);
				cd.setStatus(Constant.CHARGE_DETAIL_STATUS_OK);
				cd.setTxnAmt(txnAmt);
				String time = txnTime.substring(0,4)+"-"+txnTime.substring(4,6)+"-"+txnTime.substring(6,8)+" "+txnTime.substring(8,10)+":"+txnTime.substring(10,12)+":"+txnTime.substring(12,14);
				try {
					cd.setTxnTime(Constant.sdf.parse(time));
				} catch (ParseException e) {
					LogUtil.writeLog(txnTime);
					e.printStackTrace();
				}
				cd.setModify_time(new Date());
				cd.setOrderDesc(charge.getItem()+"【来自"+org_name+cd.getGrade_name()+cd.getClas_name()+"学生"+cd.getStud_name()+"的家长"+parent_name+"】");
				cd.setPay_method(Constant.PAY_METHOD_UNIONPAY);
				cr.setCid(cd.getCid());
				cr.setCd_id(cd.getCd_id());
				cr.setRespMsg(respMsg);
				cr.setRespCode(respCode);
				cr.setAccNo(accNo);
				cr.setTraceNo(traceNo);
				cr.setSettleAmt(settleAmt);
				cr.setQueryId(queryId);
				cr.setTxnAmt(txnAmt);
				cr.setTxnType(txnType);
				cr.setTraceTime(traceTime);
				cr.setSettleDate(settleDate);
				try {
					cr.setTxnTime(Constant.sdf.parse(time));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				cr.setOrg_user_id(Integer.parseInt(user_id));
				cr.setUser_identify(Integer.parseInt(identity));
				cr.setUser_type_id(Integer.parseInt(parent_id));
				cr.setUser_type_name(parent_name);
				cr.setInsert_time(new Date());
				cr.setIs_del(Constant.IS_DEL_NO);
				cr.setIs_show(Constant.YES);
				
				Boolean isSuccess = chargeService.chargeFinally(charge, cd, cr, Consts.STUD_STATUS_5PAID, Constant.YES, true);

				if(isSuccess){

					Map<String, Object> documentMap = new HashMap<String, Object>();
					documentMap.put("stud_id", cd.getStud_id());
					List<Parent> parents = new ArrayList<Parent>();
					
					try {
						String documentResult = HttpClientUtil.post(ESB_REQUEST_URL+"getParentPhone","stud_id="+cd.getStud_id(), "application/x-www-form-urlencoded");
						Result<List<Parent>> pResult = JsonUtil.getObjectFromJson(documentResult, new TypeReference<Result<List<Parent>>>() { });
						parents = pResult.getData();
						String template_id = "";
						try {
							template_id = tokenService.getWxTemplateId(cd.getOrg_id().toString(), Constant.TEMPLATE_NAME_CHARGE_SUCCESS_NOTICE);
						} catch (Exception e) {
						}
						Integer pid = null;
						String pname = "";
						if(null!=parents&&parents.size()!=0){
							for (Parent p : parents) {
								LogUtil.writeLog("【家长】"+p.getParent_id()+":"+p.getParent_name());
								pid = p.getParent_id();
								pname = p.getParent_name();
								Map<String, Object> map = new HashMap<String, Object>();
								if(StringUtils.isNotBlank(p.getMobile())){//SMS
									map.put("cd_id", cd.getCd_id());
									map.put("mobile", p.getMobile());
									map.put("content", String.format(Constant.MOBILE_MESSAGE_CHARGE_SUCCESS_FOR_PARENT,cd.getStud_name(),cd.getItem()));
									LogUtil.writeLog("【短信】"+p.getMobile());
								}
								if(StringUtils.isNotBlank(p.getOpenid())&&StringUtils.isNotBlank(template_id)){//WX
									map.put("open_id", p.getOpenid());
									map.put("templateId", template_id);
									map.put("cd_id", cd.getCd_id());
									map.put("org_id", cd.getOrg_id());
									map.put("first", "尊敬的家长，您已支付成功！");
									map.put("keyword1", cd.getItem());
									map.put("keyword2", parent_name);
									map.put("keyword3", cd.getMoney()+"元");
									map.put("keyword4", time);
									map.put("remark", "感谢您的使用！");
									LogUtil.writeLog("【微信】"+p.getOpenid());
								}
								mqService.sendMessage("send_message_exchange", null, map);
							}
						}
						
						loggerService.save(cd.getOrg_id(), charge.getCam_id(), cd.getStud_id(), EnumLog.TARGET_TYPE_STU.getKey(), cd.getStud_name(), 
								EnumLog.OPERATION_STU_PAID_SUCCESS.getKey(), cd.getStud_name()+EnumLog.OPERATION_STU_PAID_SUCCESS.getValue(), Constant.IDENTITY_PARENT, pid, pname, null);
						
						LogUtil.writeLog("【缴费提醒】学生 end"+cd.getStud_id());
					} catch (Exception e) {
						LogUtil.writeErrorLog("【错误】发送支付提醒时发生异常，未能向stud_id="+cd.getStud_id()+"的学生家长发送任何缴费提醒!");
					}
					LogUtil.writeLog("【银联支付成功】支付ChargeDetail主键:"+cd.getCd_id());
					
				}else{
					LogUtil.writeLog("【重复的调用】BackRcvResponse接收后台通知结束");
					//返回给银联服务器http 200  状态码
					resp.getWriter().print("ok");
					return;
				}
			}else{
				LogUtil.writeLog("【重复的银联回调】:"+cd_id);
			}
		}else{
			//未返回正确的http状态
			LogUtil.writeErrorLog("未获取到返回报文或返回http状态码非200");
		}
		LogUtil.writeLog("BackRcvResponse接收后台通知结束");
		//返回给银联服务器http 200  状态码
		resp.getWriter().print("ok");
	}

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException,
			IOException {
		this.doPost(req, resp);
	}

	/**
	 * 获取请求参数中所有的信息
	 * 当商户上送frontUrl或backUrl地址中带有参数信息的时候，
	 * 这种方式会将url地址中的参数读到map中，会导多出来这些信息从而致验签失败，这个时候可以自行修改过滤掉url中的参数或者使用getAllRequestParamStream方法。
	 * @param request
	 * @return
	 */
	public static Map<String, String> getAllRequestParam(
			final HttpServletRequest request) {
		Map<String, String> res = new HashMap<String, String>();
		Enumeration<?> temp = request.getParameterNames();
		if (null != temp) {
			while (temp.hasMoreElements()) {
				String en = (String) temp.nextElement();
				String value = request.getParameter(en);
				res.put(en, value);
				// 在报文上送时，如果字段的值为空，则不上送<下面的处理为在获取所有参数数据时，判断若值为空，则删除这个字段>
				if (res.get(en) == null || "".equals(res.get(en))) {
					// System.out.println("======为空的字段名===="+en);
					res.remove(en);
				}
			}
		}
		return res;
	}
	
	/**
	  * 获取请求参数中所有的信息。
	  * 非struts可以改用此方法获取，好处是可以过滤掉request.getParameter方法过滤不掉的url中的参数。
	  * struts可能对某些content-type会提前读取参数导致从inputstream读不到信息，所以可能用不了这个方法。理论应该可以调整struts配置使不影响，但请自己去研究。
	  * 调用本方法之前不能调用req.getParameter("key");这种方法，否则会导致request取不到输入流。
	  * @param request
	  * @return
	  */
	 public static Map<String, String> getAllRequestParamStream(
	   final HttpServletRequest request) {
		  Map<String, String> res = new HashMap<String, String>();
		  try {
		   String notifyStr = new String(IOUtils.toByteArray(request.getInputStream()),Constant.encoding);
		   LogUtil.writeLog("收到通知报文：" + notifyStr);
		   String[] kvs= notifyStr.split("&");
		   for(String kv : kvs){
		    String[] tmp = kv.split("=");
		    if(tmp.length >= 2){
		     String key = tmp[0];
		     String value = URLDecoder.decode(tmp[1],Constant.encoding);
		     res.put(key, value);
		    }
		   }
		  } catch (UnsupportedEncodingException e) {
		   LogUtil.writeLog("getAllRequestParamStream.UnsupportedEncodingException error: " + e.getClass() + ":" + e.getMessage());
		  } catch (IOException e) {
		   LogUtil.writeLog("getAllRequestParamStream.IOException error: " + e.getClass() + ":" + e.getMessage());
		  }
		  return res;
	 }
}
