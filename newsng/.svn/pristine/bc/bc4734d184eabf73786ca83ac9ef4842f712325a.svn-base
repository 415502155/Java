package sng.service.impl;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.orm.hibernate4.HibernateTransactionManager;
import org.springframework.stereotype.Component;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.support.DefaultTransactionDefinition;

import sng.dao.ChargeDao;
import sng.dao.ChargeDetailDao;
import sng.dao.ChargeRecordDao;
import sng.entity.Charge;
import sng.entity.ChargeDetail;
import sng.entity.ChargeRecord;
import sng.service.ChargeService;
import sng.util.Constant;
import sng.util.MoneyUtil;
import sng.util.Paging;
import unionpay.acp.sdk.LogUtil;

/**
 * Title: ChargeService
 * Description: 支付接口
 * Company: 世纪伟业
 * @author Liuyang
 * @date 2018年1月4日下午1:22:21
 */
@Component
@Transactional("transactionManager")
public class ChargeServiceImpl implements ChargeService{

	@Autowired
	private ChargeDao chargeDao;
	@Autowired
	private ChargeDetailDao chargeDetailDao;
	@Autowired
	private ChargeRecordDao chargeRecordDao;
	@Autowired  
    private ApplicationContext ctx;
	
	@Override
	public List<Charge> getTList(String classIds, Integer max, Integer min, Integer num) {
		return chargeDao.getTList(classIds,max,min,num);
	}

	@Override
	public Charge updateStatus(List<ChargeRecord> list, Charge charge) {
		try {
			Long shishou_money = 0l;
			Integer shishou_num = 0;
			Long tuiquanbu_money = 0l;
			Integer tuiquanbu_num = 0;
			Long tuibufen_money = 0l;
			Integer tuibufen_num = 0;
			for (ChargeRecord cr : list) {
				try {
					switch (cr.getTxnType()) {
						case Constant.TXNTYPE_UNIONPAY_PAY:
							shishou_money+=Long.parseLong(cr.getTxnAmt());
							shishou_num++;
							break;
						case Constant.TXNTYPE_UNIONPAY_REFUND:
							if(new BigDecimal(cr.getTxnAmt()).compareTo(new BigDecimal(MoneyUtil.fromYUANtoFEN(cr.getMoney())))==0){
								tuiquanbu_money+=Long.parseLong(cr.getTxnAmt());
								tuiquanbu_num++;
							}else{
								tuibufen_money+=Long.parseLong(cr.getTxnAmt());
								tuibufen_num++;
							}
							break;
						case Constant.TXNTYPE_SJWY_OFFLINE_PAY:
							shishou_money+=Long.parseLong(cr.getTxnAmt());
							shishou_num++;
							break;
						case Constant.TXNTYPE_SJWY_OFFLINE_REFUND_AGREE:
							if(new BigDecimal(cr.getTxnAmt()).compareTo(new BigDecimal(MoneyUtil.fromYUANtoFEN(cr.getMoney())))==0){
								tuiquanbu_money+=Long.parseLong(cr.getTxnAmt());
								tuiquanbu_num++;
							}else{
								tuibufen_money+=Long.parseLong(cr.getTxnAmt());
								tuibufen_num++;
							}
							break;
						default:
							break;
					}
				} catch (Exception e) {
				}
			}
			charge.setSs_money(shishou_money.toString());
			charge.setSs_num(shishou_num);
			charge.setTf_money_all(tuiquanbu_money.toString());
			charge.setTf_num_all(tuiquanbu_num);
			charge.setTf_money_part(tuibufen_money.toString());
			charge.setTf_num_part(tuibufen_num);
			chargeDao.update(charge);
		} catch (Exception e) {
		}
		return charge;
	}

	@Override
	public Charge getById(Integer cid) {
		return chargeDao.get(Charge.class, cid);
	}

	@Override
	public Paging<Charge> getTList(Charge charge, Paging<Charge> page) {
		return chargeDao.getTList(charge,page);
	}

	@Override
	public void save(Charge charge) {
		chargeDao.save(charge);
	}

	@Override
	public void update(Charge charge) {
		chargeDao.update(charge);
	}

	@Override
	public List<Charge> getTodayCharge(Integer org_id,Date date) {
		return chargeDao.getTodayCharge(org_id,date);
	}

	@Override
	public Integer duplication(String org_id, String item, String money, String range, Integer payType) {
		return chargeDao.duplication(org_id,item,money,range,payType);
	}

	@Override
	public Boolean chargeFinally(Charge charge, ChargeDetail cd, ChargeRecord cr) {
		HibernateTransactionManager txManager = (HibernateTransactionManager) ctx.getBean("transactionManager");
		DefaultTransactionDefinition def = new DefaultTransactionDefinition();
		def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);// 事物隔离级别，开启新事务
		TransactionStatus txStatus = txManager.getTransaction(def);// 获得事务状态
		try {
			LogUtil.writeLog("chargeFinal.start:"+charge.getCid()+";"+cd.getCd_id()+";"+cr.getQueryId());
			chargeRecordDao.save(cr);
			LogUtil.writeLog("chargeFinal.chargeRecord:"+cr.getCr_id());
			chargeDetailDao.update(cd);
			LogUtil.writeLog("chargeFinal.chargeDetail:"+cd.getStatus()+";"+cd.getModify_time());
			
			ChargeRecord query = new ChargeRecord();
			query.setCid(cd.getCid());
			List<ChargeRecord> crlist = chargeRecordDao.getList(query);
			Integer no_pay_num = chargeDetailDao.countNoPay(cd.getCid());
			
			charge.setNopay_num(no_pay_num);
			if(0==no_pay_num.intValue()){
				charge.setStatus(Constant.CHARGE_STATUS_FINISHED);
			}
			updateStatus(crlist,charge);
			LogUtil.writeLog("chargeFinal.charge:"+charge.getNopay_num());
			txManager.commit(txStatus);
			return true;
		} catch (Exception e) {
			txManager.rollback(txStatus);
			return false;
		}
	}
	
}
