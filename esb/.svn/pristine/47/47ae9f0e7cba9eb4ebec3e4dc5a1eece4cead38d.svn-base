package cn.edugate.esb.web.manage;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.json.JSONException;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import cn.edugate.esb.Result;
import cn.edugate.esb.ResultDwz;
import cn.edugate.esb.authentication.FPSet;
import cn.edugate.esb.entity.Organization;
import cn.edugate.esb.entity.Right;
import cn.edugate.esb.entity.Role;
import cn.edugate.esb.entity.RoleLabel;
import cn.edugate.esb.entity.UcUser;
import cn.edugate.esb.service.OrganizationService;
import cn.edugate.esb.service.RoleService;
import cn.edugate.esb.service.UserService;
import cn.edugate.esb.util.Paging;
import cn.edugate.esb.util.Util;

/**
 * 
 * @Name: 权限管理controller
 * @Description: 维护权限(添加和删除权限)。
 * @date  2013-4-11
 * @version V1.0
 */
@Controller
@RequestMapping("/manage/role")
public class MroleController {
	static Logger logger=LoggerFactory.getLogger(MroleController.class);

	
	private RoleService roleService;
	private UserService userService;
	private OrganizationService organizationService;
	private Util util;
	
	@Autowired
	public void setOrganizationService(OrganizationService organizationService) {
		this.organizationService = organizationService;
	}
	
	@Autowired
	public void setUtil(Util util) {
		this.util = util;
	}
	@Autowired
	public void setRoleService(RoleService roleService) {
		this.roleService = roleService;
	}	
	@Autowired
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	@RequestMapping(value = "/list")
	public ModelAndView list(@RequestParam(value="numPerPage",defaultValue="25") Integer numPerPage,
			@RequestParam(value="totalPage",defaultValue="") Integer totalPage,@RequestParam(value="pageNum",defaultValue="1") Integer pageNum,
			HttpServletRequest request){
		ModelAndView mav = new ModelAndView("/role/list");
		Paging<Role> paging = new Paging<Role>();
		paging.setLimit(numPerPage);
		paging.setPage(pageNum);
		paging.setStart(0);
		String roleName = request.getParameter("searchName");
		paging = this.roleService.getAllWithPaging(paging,roleName);
		mav.addObject("roles", paging);
		mav.addObject("ctx", request.getContextPath());
		return mav;
	}
	
	@RequestMapping(value = "/all")
	public List<Role> all(@RequestParam(value="role_name",defaultValue="") String roleName,@RequestParam(value="role_note",defaultValue="") String roleNote){
		List<Role> list = new ArrayList<Role>();
		Role role = new Role();
		role.setRole_name(roleName);
		role.setRole_note(roleNote);
		list = this.roleService.getAll();
		return list;
	}

	@RequestMapping(value = "/goAdd",method = RequestMethod.GET)
	public ModelAndView goRoleAdd() {
		ModelAndView mav = new ModelAndView("/role/add");
		List<Organization> orgs = this.organizationService.getOrgList();
		List<RoleLabel> rls =  this.roleService.getRoleLabels(0);
		mav.addObject("orgs", orgs);
		mav.addObject("rls", rls);
		return mav;
	}
	
	@RequestMapping(value = "/add",method = RequestMethod.POST)
	public @ResponseBody ResultDwz add(@RequestParam(value="role_name",defaultValue="") String roleName,@RequestParam(value="role_note",defaultValue="") String roleNote
			,@RequestParam(defaultValue="0") Integer org_id,@RequestParam(defaultValue="0") Integer rl_id){
		Role role = new Role();
		role.setRole_name(roleName);
		role.setRole_note(roleNote);
		role.setOrg_id(org_id);
		role.setRl_id(rl_id);
		role.setIs_del(false);
		this.roleService.add(role);
		ResultDwz result = new ResultDwz();
		result.setStatusCode("200");
		result.setMessage("操作成功");
		result.setNavTabId("role");
		result.setCallbackType("closeCurrent");
		return result;
	}

	@RequestMapping(value = "/goEdit",method = RequestMethod.GET)
	public ModelAndView goRoleEdit(@RequestParam(value="rid") Integer roleId) {
		ModelAndView mav = new ModelAndView("/role/edit");
		Role role = this.roleService.getById(roleId);
		List<FPSet> fps = this.roleService.getFPSetsByRole(roleId);
		List<Organization> orgs = this.organizationService.getOrgList();
		List<RoleLabel> rls =  this.roleService.getRoleLabels(0);
		mav.addObject("orgs", orgs);
		mav.addObject("rls", rls);
		mav.addObject("role", role);
		mav.addObject("fps", fps);
		return mav;
	}
	
	@RequestMapping(value = "/edit",method = RequestMethod.POST)
	public @ResponseBody ResultDwz editsave(@RequestParam(value="rid") Integer roleId,@RequestParam(value="role_name",defaultValue="") String roleName,@RequestParam(value="role_note",defaultValue="") String roleNote
			,@RequestParam(defaultValue="0") Integer org_id,@RequestParam(defaultValue="0") Integer rl_id) {
		Role role = this.roleService.getById(roleId);
		role.setRole_name(roleName);
		role.setRole_note(roleNote);
		role.setOrg_id(org_id);
		role.setRl_id(rl_id);
		this.roleService.update(role);
		ResultDwz result = new ResultDwz();
		result.setStatusCode("200");
		result.setMessage("操作成功");
		result.setNavTabId("role");
		result.setCallbackType("closeCurrent");
		return result;
	}

	@RequestMapping(value = "/delete")
	public @ResponseBody ResultDwz deleterole(@RequestParam(value="rid") Integer roleId) {
		int i = 0;
		i = this.roleService.deleteById(roleId);
		ResultDwz result = new ResultDwz();
		result.setStatusCode("200");
		result.setNavTabId("role");
		if(i>0){
			result.setMessage("删除成功");
		}else{
			result.setMessage("删除失败");
		}
		return result;
	}
	
	@RequestMapping(value = "/goLook")
	public ModelAndView goLook(@RequestParam(value="numPerPage",defaultValue="20") Integer numPerPage,@RequestParam(value="totalPage",defaultValue="") Integer totalPage,
			@RequestParam(value="pageNum",defaultValue="1") Integer pageNum,HttpServletRequest request) throws UnsupportedEncodingException {
		ModelAndView mav = new ModelAndView("/role/lookUser");
		Paging<UcUser> paging = new Paging<UcUser>();
		paging.setLimit(numPerPage);
		paging.setPage(pageNum);
		paging.setStart(0);
		String name = request.getParameter("searchName");
		String mobile = request.getParameter("searchMobile");
		String mail = request.getParameter("searchMail");
		String type = request.getParameter("searchType");
		String roleId = request.getParameter("rid");
		String orgType = request.getParameter("orgType");
		String udid = request.getParameter("udid");
		paging = this.userService.getAllByRoleIdWithPaging(paging,name,mobile,mail,type,roleId,orgType,udid);
		mav.addObject("users", paging);
		mav.addObject("role_id", roleId);
		mav.addObject("roleName", roleService.getById(Integer.parseInt(roleId)).getRole_name());
		mav.addObject("ctx", request.getContextPath());
		return mav;
	}

	@RequestMapping(value = "/checkRoleName")
	public void checkRoleName(@RequestParam(value="name") String name,@RequestParam(value="id") String id,
			HttpServletResponse response) throws IOException {
		JSONObject json = new JSONObject(); 
    	response.setContentType("application/json; charset=UTF-8");
    	PrintWriter responseWriter = response.getWriter();        	
    	try {
    		boolean isUseable = roleService.checkRoleName(name,id);
    		if(isUseable){
    			json.put("code", "200");
    		}else{
    			json.put("code", "201");
    		}
			json.write(responseWriter);
		} catch (JSONException e) {
			logger.error("JSONException====", e);
		}
    	responseWriter.flush();
    	responseWriter.close();
	}
	
	@RequestMapping(value="/fpsets_update")
	public @ResponseBody Result<FPSet> fpsets_update(@RequestParam Integer roleId,
			@RequestParam String authority,@RequestParam String texts) {
		Result<FPSet> result=new Result<FPSet>();
		FPSet fp=this.roleService.getFPSetByRole(roleId,authority);
		List<String> _texts=this.util.getPojoFromRequest(texts, String.class);
		fp.setTexts(_texts);
		this.roleService.setRoleAuthority(roleId, authority, fp.getValue());
		
		result.setData(fp);
		result.setSuccess(true);		
		return result;
	}
	
	@RequestMapping(value = "/rightlist")
	public ModelAndView rightlist(@RequestParam(value="numPerPage",defaultValue="20") Integer numPerPage,
			@RequestParam(value="totalPage",defaultValue="") Integer totalPage,@RequestParam(value="pageNum",defaultValue="1") Integer pageNum,
			HttpServletRequest request){
		ModelAndView mav = new ModelAndView("/role/rightlist");
		Paging<Right> paging = new Paging<Right>();
		paging.setLimit(numPerPage);
		paging.setPage(pageNum);
		paging.setStart(0);
		String searchName = request.getParameter("searchName");
		this.roleService.getAllRightWithPaging(paging,searchName);
		mav.addObject("paging", paging);
		mav.addObject("ctx", request.getContextPath());
		return mav;
	}
	
	@RequestMapping(value = "/rightadd",method = RequestMethod.GET)
	public ModelAndView rightadd(){
		ModelAndView mav = new ModelAndView("/role/rightadd");
		return mav;
	}
	
	@RequestMapping(value = "/rightadd",method = RequestMethod.POST)
	public @ResponseBody ResultDwz rightaddpost(@RequestParam String right_name,@RequestParam String right_code,@RequestParam String right_note){
		ResultDwz result = new ResultDwz();
		Right right = new Right();
		right.setRight_name(right_name);
		right.setRight_code(right_code);
		right.setRight_note(right_note);
		right.setInsert_time(new Date());
		right.setIs_del(false);
		this.roleService.addright(right);		
		result.setStatusCode("200");
		result.setMessage("操作成功");
		result.setNavTabId("right");
		result.setCallbackType("closeCurrent");
		return result;
	}
	
	@RequestMapping(value = "/rightEdit",method = RequestMethod.GET)
	public ModelAndView rightedit(@RequestParam Integer rid){
		ModelAndView mav = new ModelAndView("/role/rightedit");
		Right right = this.roleService.getRightById(rid);
		mav.addObject("right", right);
		return mav;
	}
	
	@RequestMapping(value = "/rightEdit",method = RequestMethod.POST)
	public @ResponseBody ResultDwz righteditpost(@RequestParam Integer rid,@RequestParam String right_name,@RequestParam String right_code,@RequestParam String right_note){
		ResultDwz result = new ResultDwz();
		Right right = this.roleService.getRightById(rid);
		right.setRight_name(right_name);
		right.setRight_code(right_code);
		right.setRight_note(right_note);
		this.roleService.addright(right);		
		result.setStatusCode("200");
		result.setMessage("操作成功");
		result.setNavTabId("right");
		result.setCallbackType("closeCurrent");
		return result;
	}
	
	
}
