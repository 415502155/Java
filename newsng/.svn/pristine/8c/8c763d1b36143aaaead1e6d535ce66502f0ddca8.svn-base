package sng.dao.impl;

import java.util.ArrayList;
import java.util.List;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.transform.Transformers;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Repository;

import sng.dao.BaseSetClassRoomManageDao;
import sng.entity.Classroom;
import sng.pojo.CampusAndClassRoomPojo;
import sng.pojo.ParamObj;
import sng.util.Paging;

/**
 * @desc 基础设置模块-教室管理dao实现
 * @author magq
 * @data 2018-10-29
 * @version 1.0
 */
@Repository
public class BaseSetClassRoomManageDaoImpl extends BaseDaoImpl<Classroom> implements BaseSetClassRoomManageDao {

	private Logger log = LoggerFactory.getLogger(BaseSetClassRoomManageDaoImpl.class);

	/*
	 *  查询教室列表
	 * @see sng.dao.BaseSetClassRoomManageDao#queryClassRommList(sng.pojo.ParamObj)
	 */
	@Override
	public List<Classroom> queryClassRommList(ParamObj paramObj) {
		// TODO Auto-generated method stub
		StringBuffer sql = new StringBuffer();
		List<Object> paramList = new ArrayList<Object>();
		sql.append("select classroom_id,cam_id,classroom_name,is_del from classroom where 1=1");
		if (paramObj != null) {
			if (paramObj.getCam_id() != null) {
				sql.append(" and cam_id=?");
				paramList.add(paramObj.getCam_id());
			}
		}
		sql.append(" and is_del<>1");

		Session session = this.factory.getCurrentSession();
		Query query = session.createSQLQuery(sql.toString());
		for (int i = 0; i < paramList.size(); i++) {
			query.setParameter(i, paramList.get(i));
		}
		query.setResultTransformer(Transformers.aliasToBean(Classroom.class));
		
		List<Classroom> list = query.list();

		return list;
	}

	/*
	 * (non-Javadoc)
	 * @see sng.dao.BaseSetClassRoomManageDao#queryCampusAndClassRoomInfo(sng.pojo.ParamObj)
	 */
	@Override
	public Paging<CampusAndClassRoomPojo> queryCampusAndClassRoomInfo(ParamObj paramObj) {
		StringBuffer sql = new StringBuffer();
		StringBuffer sqlCount = new StringBuffer();
		Paging<CampusAndClassRoomPojo> paging = new Paging<CampusAndClassRoomPojo>();
		
		List<Object> paramList = new ArrayList<Object>();
		sql.append("select c.cam_id,c.cam_name,c.cam_address,c.cam_type,cr.classroom_id,cr.building,cr.floor from campus c");
		sql.append(" left join classroom cr on c.cam_id = cr.cam_id");
		sql.append(" where cr.cam_id IS NOT NULL");
		sql.append(" and c.is_del=0");
		
		Session session  = this.factory.getCurrentSession();
		Query query=null;
		int count = 0;
		if(paramObj.isNeedCount()) {
			sqlCount.append("select count(0) from ("+sql.toString()+") T");
			query =session.createSQLQuery(sqlCount.toString());
			count = Integer.parseInt(query.uniqueResult().toString());
			sql.append(" limit ?,?");
			paramList.add(paramObj.getLimit()*(paramObj.getPage()-1));
			paramList.add(paramObj.getLimit());
		}
		query = session.createSQLQuery(sql.toString());
		for (int i = 0; i < paramList.size(); i++) {
			query.setParameter(i, paramList.get(i));
		}
		query.setResultTransformer(Transformers.aliasToBean(CampusAndClassRoomPojo.class));
		List<CampusAndClassRoomPojo> campusAndClassRoomPojos = query.list();
		paging.setTotal(count);
		paging.setSize(
				count % paramObj.getLimit() == 0 ? (count / paramObj.getLimit()) : (count / paramObj.getLimit() + 1));
		paging.setData(campusAndClassRoomPojos);
		paging.setSuccess(true);
		return paging;
	}

}
