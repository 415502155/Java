package sng.controller.web;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import sng.constant.Consts;
import sng.controller.common.BaseAction;
import sng.pojo.ClassToTeacher;
import sng.pojo.Result;
import sng.pojo.ResultEx;
import sng.pojo.SessionInfo;
import sng.pojo.base.Teacher;
import sng.service.ClassService;
import sng.util.CommonUtils;
import sng.util.Constant;
import sng.util.DateUtil;
import sng.util.EnumLog;
import sng.util.ExcelExport;
import sng.util.ExcelParam;
import sng.util.ExcelUtil;
import sng.util.LoggerUtil;
import sng.util.Paging;
import sng.util.ValidateObject;

/***
 * 
 *  @Company sjwy
 *  @Title: ClassController.java 
 *  @Description: 班级管理（查询某班级的详情，添加修改班级，批量导入班级和学员，下载导入的错误文件，删除班级，插班查询，插班，班级列表，导出班级和学员，班级下的学员列表，列表统计）
 *	@author: shy
 *  @date: 2018年10月25日 上午8:24:12
 */
@Controller
@RequestMapping("/class")
public class ClassController extends BaseAction {
	
	private final Logger log = LoggerFactory.getLogger(this.getClass());

	@Autowired
	private ClassService classService;

	/***
	 * 
	 *  @Description: 添加班级
	 *  @param classes
	 *  @return
	 * @throws ParseException 
	 * @throws IOException 
	 */
	@SuppressWarnings("rawtypes")
	@RequestMapping(value = "/add.htm")
	@ResponseBody
	public Result<?> addClass(HttpServletRequest request, HttpServletResponse response) throws ParseException, IOException {
		SessionInfo sessionInfo=this.getSessionInfo(request);
		Teacher tech = this.getTechByUId(sessionInfo.getUserId().toString());
		String userTypeName = tech.getTech_name();
		Map<String,Object> reqMap=CommonUtils.doParameters(request);
		Integer orgId = null;
		if (null != reqMap.get("orgId")) {
			orgId = Integer.parseInt((String) reqMap.get("orgId"));
		}
		if (null == orgId) {
			orgId = sessionInfo.getOrgId();
		}
		String tuitionFees = (String) reqMap.get("tuitionFees");//学费标准
		StringBuffer errFees = new StringBuffer();
		boolean flag = true;
		Map feesMap = ValidateObject.validateFees(tuitionFees, errFees, flag);//校验学费格式是否正确
		Integer fessFlag = (Integer) feesMap.get("success");
		String feesInfo = (String) feesMap.get("msg");
		if (fessFlag == -1) {
			return ResultEx.error(Constant.ERROR_CODE, feesInfo, "");
		}
		String clasName = (String) reqMap.get("clasName");
		Integer termId = Integer.parseInt((String) reqMap.get("termId"));
		Integer clasId = null; 
		Integer classCount = classService.getClassCount(orgId, termId, clasName, clasId);
		
		if (1 == classCount) {// 当前学期下，根据前段传来的班级名称 查询数据库是否有这个名称的班级 有提示
			return ResultEx.error(Constant.ERROR_CODE, "当前学期下班级名称重复,不能创建该班级;", "");
		} else {
			classService.save(userTypeName, reqMap, sessionInfo);
		}

		
		return ResultEx.success(reqMap);
	}
	/***
	 * 
	 *  @Description: 修改班级时，回显班级信息
	 *  @param request
	 *  @param orgId
	 *  @param clasId
	 *  @param response
	 *  @return
	 */
	@SuppressWarnings("rawtypes")
	@RequestMapping(value = "/toUpdate.htm")
	@ResponseBody
	public Result<?> toUpdateClass(HttpServletRequest request, Integer org_id, Integer clasId, HttpServletResponse response) {
		SessionInfo sessionInfo=this.getSessionInfo(request);
		Integer orgId = org_id;
		if (null == orgId) {
			orgId = sessionInfo.getOrgId();
		}
		Map clasMap = null;
		try {
			clasMap = classService.getById(orgId, clasId);
		} catch (Exception e) {
			e.printStackTrace();
			log.info("toUpdateClass Ex : " + e);
			return ResultEx.error(Constant.ERROR_CODE, Constant.ERROR_MSG, "");
		}
		return ResultEx.success(clasMap);
	}
	/***
	 * 修改班级及教师
	 * @throws IOException 
	 */
	@RequestMapping(value = "/update.htm")
	@ResponseBody
	public Result<?> updateClass(HttpServletRequest request, HttpServletResponse response) throws IOException {
		SessionInfo sessionInfo=this.getSessionInfo(request);
		Map<String,Object> reqMap=CommonUtils.doParameters(request);
		Teacher tech = this.getTechByUId(sessionInfo.getUserId().toString());
		String userTypeName = tech.getTech_name();
		Integer orgId = null;
		if (null != reqMap.get("org_id")) {
			orgId = Integer.parseInt((String) reqMap.get("org_id"));
		}
		if (null == orgId) {
			orgId = sessionInfo.getOrgId();
		}
		Integer clasId = Integer.parseInt((String) reqMap.get("clasId"));
		List<Map<String, Object>> techList = classService.getTecherIds(orgId, clasId);
		String clasName = (String) reqMap.get("clasName");
		Integer termId = Integer.parseInt((String) reqMap.get("termId"));
		//除当前班外  当前机构、当前学期 修改的名称不能和已存在的班级名称相同
		Integer classCount = classService.getClassCount(orgId, termId, clasName, clasId);
		try {
			if (1 == classCount) {// 当前学期下，根据前段传来的班级名称 查询数据库是否有这个名称的班级 有提示 (除了当前班级下的班级是否有重名)
				ResultEx.error(Constant.ERROR_CODE, "当前学期下班级名称重复,不能编辑该班级;", "");
			} else {
				classService.updateClasssAndTeacher(userTypeName, reqMap, sessionInfo, techList);
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("updateClass Ex : " + e);
			return ResultEx.error(Constant.ERROR_CODE, Constant.ERROR_MSG, "");
		}
		return ResultEx.success("");
	}
	
	/***
	 * 
	 *  @Description: 获取班级列表
	 *  @param orgId 机构id
	 *  @param termId 学期id
	 *  @param clasType 班级类型 新生班-老生班
	 *  @param categoryId 类目id
	 *  @param subjectId 科目id
	 *  @param camId 校区id
	 *  @param classWeek 上课星期 星期一-星期二。。。
	 *  @param tech_names 教师名称
	 *  @param isAll 是否导出全部分页数据  1全部导出  其他：否
	 *  @param page 当前页数 	
	 *  @param limit 每页条目数
	 *  @return
	 */
	@RequestMapping(value = "/class/list.htm")
	@ResponseBody
	public Result<?> getClassList(HttpServletRequest request, @RequestParam(name = "page", defaultValue = "1") Integer page,
			@RequestParam(name = "limit", defaultValue = Constant.NUM_PER_PCPAGE_STRING) Integer limit,
			Integer org_id, Integer termId, Integer clasType, Integer categoryId,
			Integer subjectId, String camId, Integer classWeek, String techNames) {
		SessionInfo sessionInfo=this.getSessionInfo(request);
		Integer orgId = org_id;
		if (null == orgId) {
			orgId = sessionInfo.getOrgId();
		}
		Paging<ClassToTeacher> pageClasTech = new Paging<ClassToTeacher>();
		pageClasTech.setPage(page);
		pageClasTech.setLimit(limit);
		Paging<ClassToTeacher> paging = null;
		try {
			paging = classService.getClassList(orgId, termId, clasType, categoryId, subjectId, camId, classWeek, techNames, pageClasTech);
		} catch (Exception e) {
			e.printStackTrace();
			log.info("getClassList Ex : " + e);
			return ResultEx.error(Constant.ERROR_CODE, Constant.ERROR_MSG, "");
		}
		return ResultEx.success(paging);
	}
	/***
	 * 
	 *  @Description: 统计班级信息
	 *  @param page
	 *  @param limit
	 *  @param orgId
	 *  @param termId
	 *  @param clasType
	 *  @param categoryId
	 *  @param subjectId
	 *  @param camId
	 *  @param classWeek
	 *  @param tech_names
	 *  @return
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@RequestMapping(value = "statistics/list.htm")
	@ResponseBody
	public Result<?> getStatisticsInfo(HttpServletRequest request, @RequestParam(name = "page", defaultValue = "1") Integer page,
			@RequestParam(name = "limit", defaultValue = Constant.NUM_PER_PCPAGE_STRING) Integer limit,
			Integer org_id, Integer termId, Integer clasType, Integer categoryId,
			Integer subjectId, String camId, Integer classWeek, String techNames) {
		SessionInfo sessionInfo = this.getSessionInfo(request);
		Integer orgId = org_id;
		if (null == orgId) {
			orgId = sessionInfo.getOrgId();
		}
		Paging<ClassToTeacher> pageClasTech = new Paging<ClassToTeacher>();
		pageClasTech.setPage(page);
		pageClasTech.setLimit(limit);
		List<ClassToTeacher> list = null;
		Map returnMap = new HashMap();
		List<Integer> idsList = new ArrayList<Integer>();
		try {
			list = classService.getClassList(orgId, termId, clasType, categoryId, subjectId, camId, classWeek, techNames);
			if (null != list && list.size() > 0) {
				for (ClassToTeacher ct : list) {
					idsList.add(ct.getClas_id());
				}
				returnMap = classService.getStatisticsInfo(idsList);
			} else {
				returnMap.put("ss_num", 0);
				returnMap.put("ss_money", 0);
				returnMap.put("st_money", 0);
				returnMap.put("num", 0);
				returnMap.put("sjs_money", 0);
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("getStatisticsInfo Ex : " + e);
			return ResultEx.error(Constant.ERROR_CODE, Constant.ERROR_MSG, "");
		}
		return ResultEx.success(returnMap);
	}
	
	/***
	 * 
	 *  @Description: 导出班级列表
	 *  @param request
	 *  @param orgId
	 *  @param termId
	 *  @param clasType
	 *  @param categoryId
	 *  @param subjectId
	 *  @param camId
	 *  @param classWeek
	 *  @param techNames (按照教师名称和班级名称进行模糊查询)
	 *  @param ids (多个班级的id)
	 *  @param isAll (是否选择全部分页数据 1:是  其他:否)
	 *  @param response
	 *  @return
	 */
	@RequestMapping(value = "/exportClass.htm")
	@ResponseBody
	public Result<?> exportClassList(HttpServletRequest request, 
			Integer org_id, Integer termId, Integer clasType, Integer categoryId,
			Integer subjectId, String camId, Integer classWeek, String techNames, String ids, Integer isAll,
			HttpServletResponse response) {
		SessionInfo sessionInfo=this.getSessionInfo(request);
		Integer orgId = org_id;
		if (null == orgId) {
			orgId = sessionInfo.getOrgId();
		}
		String[] heads = { "班级名称", "班级类别", "所属类目", "所属科目", "所属校区", "所在教学楼", "所在楼层", "所在教室", "班级容量",
				"年龄要求", "起始生日", "结束生日", "总课时数", "开课日期", "上课星期", "上课时间", "下课时间",
				"不固定时间", "学费标准", "职教老师", "联合机构"
				};
		StringBuilder fileName = new StringBuilder();
		fileName.append("班级列表").append(new SimpleDateFormat("yyyyMMddhhmmss").format(new Date()).toString())
				.append(".xls");
		String file = fileName.toString();
		log.info("filename :" + file);
		List<String[]> data = new LinkedList<String[]>();
		List<ClassToTeacher> list = null;
		try {
			list = classService.getClassIdList(orgId, termId, clasType, categoryId, subjectId, camId, classWeek, techNames, ids, isAll);
			if (list != null && list.size() > 0) {
				for (ClassToTeacher ct : list) {
					String[] temp = new String[heads.length];
					//temp[0] = String.valueOf(i + 1);
					temp[0] = ct.getClas_name();
					temp[1] = Consts.CLASS_TYPE_MAP.get(ct.getClas_type().toString());
					temp[2] = ct.getCategory_name();
					temp[3] = ct.getSubject_name();
					temp[4] = ct.getCam_name();
					temp[5] = ct.getBuilding();
					temp[6] = ct.getFloor();
					temp[7] = ct.getClassroom_name();
					temp[8] = ct.getSize().toString();//班级容量
					temp[9] = ct.getAge_range();//年龄要求
					temp[10] = CommonUtils.dateFormat(ct.getStart_birthday(), "yyyy-MM-dd").toString();
					temp[11] = CommonUtils.dateFormat(ct.getEnd_birthday(), "yyyy-MM-dd").toString();
					temp[12] = ct.getTotal_hours().toString();//总课时数
					temp[13] = CommonUtils.dateFormat(ct.getClass_start_date(), "yyyy-MM-dd");//CommonUtils.dateFormat(ct.getClass_start_date(), null).toString();//开课日期
					//1）不固定时间不为null  清空上课星期 2）不固定时间为null  其他三个日期都不为null
					if (ct.getClass_unset_time() == null) {
						temp[14] = Consts.WEEK_MAP.get(ct.getClass_week().toString());//上课星期
						temp[15] = ct.getClass_begin_time();//上课时间
						temp[16] = ct.getClass_over_time();//下课时间
						temp[17] = ct.getClass_unset_time();//不固定时间
					} else {
						temp[14] = Consts.WEEK_MAP.get(null);//上课星期
						temp[15] = ct.getClass_begin_time();//上课时间
						temp[16] = ct.getClass_over_time();//下课时间
						temp[17] = ct.getClass_unset_time();//不固定时间
					}
					temp[18] = ct.getTuition_fees();//学费标准
					temp[19] = ct.getTech_names();//职教老师
					temp[20] = ct.getName();//联合机构
					data.add(temp);
				}
			}
			ExcelParam param = new ExcelParam.Builder("班级列表").headers(heads).data(data).build();
			ExcelExport.export(param, file, request, response);
		} catch (Exception e) {
			e.printStackTrace();
			log.info("班级数据导出异常信息  :" + e);
			return ResultEx.error(Constant.ERROR_CODE, "操作班级数据导出异常", "");
		}
		return ResultEx.success("");
	}
	
	/***
	 * 
	 *  @Description: 导出学生列表（已缴费）
	 *  @param request
	 *  @param orgId
	 *  @param termId
	 *  @param clasType
	 *  @param categoryId
	 *  @param subjectId
	 *  @param camId
	 *  @param classWeek
	 *  @param techNames (按照教师名称和班级名称进行模糊查询)
	 *  @param ids 
	 *  @param isAll (是否选择全部分页数据 1:是  其他:否)
	 *  @param response
	 *  @return
	 * @throws Exception 
	 */
	@RequestMapping(value = "/exportStudent.htm")
	@ResponseBody
	public Result<?> exportStudentList(HttpServletRequest request, 
			Integer org_id, Integer termId, Integer clasType, Integer categoryId,
			Integer subjectId, String camId, Integer classWeek, String techNames, String ids, Integer isAll,
			HttpServletResponse response) throws Exception {
		SessionInfo sessionInfo=this.getSessionInfo(request);
		Integer orgId = org_id;
		if (null == orgId) {
			orgId = sessionInfo.getOrgId();
		}
		//班级名称、学员名称、证件号码、学员状态（8种）
		String[] heads = {"班级名称", "学员名称", "证件号码", "学员状态"};
		StringBuilder fileName = new StringBuilder();
		fileName.append("学员列表").append(new SimpleDateFormat("yyyyMMddhhmmss").format(new Date()).toString())
				.append(".xls");
		String file = fileName.toString();
		log.info("filename :" + file);
		List<String[]> data = new LinkedList<String[]>();
		List<Map<String, Object>> alllist = new ArrayList<Map<String, Object>>();
		//获取当前查询条件下的班级列表信息
		String status = "5";
		//List<Integer> cidList = new ArrayList<>();
		StringBuffer sbIds = new StringBuffer();
		List<ClassToTeacher> list = classService.getClassIdList(orgId, termId, clasType, categoryId, subjectId, camId, classWeek, techNames, ids, isAll);
		if (null != list && list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {//(ClassToTeacher ct : list) {
				Integer clasId = list.get(i).getClas_id();
				if(i == list.size()-1)
				{
					sbIds.append(clasId);
				} else {
					sbIds.append(clasId);
					sbIds.append(",");
				}
			}
			alllist = classService.getStudentList(orgId, sbIds.toString(), status);
			try {
				for (int i = 0; i < alllist.size(); i++) {
					String[] temp = new String[heads.length];
					//temp[0] = String.valueOf(i + 1);
					temp[0] = String.valueOf(alllist.get(i).get("clas_name"));
					temp[1] = alllist.get(i).get("stud_name") == null ? "" : alllist.get(i).get("stud_name").toString();
					temp[2] = alllist.get(i).get("user_idnumber") == null ? "" : alllist.get(i).get("user_idnumber").toString();
					temp[3] = Consts.STUD_PAY_STATUS_MAP.get(String.valueOf(alllist.get(i).get("stu_status")));
					data.add(temp);
				}
				ExcelParam param = new ExcelParam.Builder("学员列表").headers(heads).data(data).build();
				ExcelExport.export(param, file, request, response);
			} catch (Exception e) {
				e.printStackTrace();
				log.info("学员列表数据导出异常信息  :" + e);
				return ResultEx.error(Constant.ERROR_CODE, "学员列表数据导出异常", "");
			}
		}
		
		return ResultEx.success("");
	}
	
	/***
	 * 
	 *  @Description: 根据学生编号来查找学生信息，并验证该学生是否在当前班级，
	 *  如以所在当前班级进行提示不能插班,
	 *  班级名额已满或年龄段验证不符、上课时间冲突时给出提示，但是可以继续进行插班操作
	 *  @param orgId
	 *  @param clasId
	 *  @param studCard
	 *  @return
	 */
	@SuppressWarnings({ "unchecked", "unused", "rawtypes" })
	@RequestMapping(value = "/queryByCard.htm")
	@ResponseBody
	public Result<?> queryByCard(HttpServletRequest request, Integer org_id, Integer clasId, String stuIdNumber, Integer size) {
		SessionInfo sessionInfo = this.getSessionInfo(request);
		Integer orgId = org_id;
		if (null == orgId) {
			orgId = sessionInfo.getOrgId();
		}
		List<Map<String, Object>> stuList = null;
		Map returnMap = new HashMap<>();
		String birthday = "";
		StringBuffer promptMessage = new StringBuffer();
		try {
			//获取当前学员的信息和所在班级的详细信息
			stuList = classService.getStudentInfo(orgId, stuIdNumber);
			//根据当前身份证号码和学员名称查询学员是否存在
			List<Map<String, Object>> userRegisterList = classService.getUserRegisterList(orgId, stuIdNumber);
			if (userRegisterList != null && userRegisterList.size() > 0) {
				//学员存在  获取学员生日
				Map<String, Object> regMap= userRegisterList.get(0);
				Date date = (Date) regMap.get("brithday");
				birthday = CommonUtils.dateFormat(date, "yyyy-MM-dd");
			} else {
				return ResultEx.error(Constant.ERROR_CODE, "没有该学生的信息,请确认该学生的证件号码是否正确！", "");
			}
			if (null != stuList && stuList.size() > 0) {
				Map stuMap = stuList.get(0);
				returnMap.put("stud_name", stuMap.get("stud_name"));
				returnMap.put("user_idnumber", stuMap.get("user_idnumber"));//stud_id
				returnMap.put("stud_id", stuMap.get("stud_id"));
				returnMap.put("user_type", stuMap.get("user_type"));
				//根据机构id和班级id 获取当前班级下的 上课时间  班级容量  起始生日
				Integer classWeek = null;
				Date classBeginTime = null;
				Date classOverTime = null;
				String  classUnsetTime = null;
				Date  startBirthday = null;
				Date endBirthday = null;
				String classBeginTime1 = "";
				String classOverTime1  = "";
				//获取当前班的可用容量
				Integer quotaHold = 1;
				Integer usableNum = stuMap.get("usable_num") == null ? 0 : (Integer) stuMap.get("usable_num");
				//usableNum = classService.getCurClassUsableNum(orgId, clasId, quotaHold, size); 
				//当前班级下的 详细信息
				List<Map<String, Object>> clasList = classService.getCurClassInfo(orgId, clasId);				
				if (null != clasList && clasList.size() > 0) {
					Map<String, Object> clasMap = clasList.get(0);
					classWeek = (Integer) clasMap.get("class_week");
					if (classWeek != 8) {
						//将  Timestamp格式转换 为yyyy-MM-dd HH:mm:ss
						Timestamp begin = (Timestamp) clasMap.get("class_begin_time");
						String beginTime = CommonUtils.dateFormat(begin, null);
						classBeginTime = CommonUtils.stringToDate(beginTime, null);
						classBeginTime1 = (String) clasMap.get("class_begin_time1");
						
						Timestamp over = (Timestamp) clasMap.get("class_over_time");
						String overTime = CommonUtils.dateFormat(over, null);
						classOverTime = CommonUtils.stringToDate(overTime, null);
						classOverTime1  = (String) clasMap.get("class_over_time1");
						
					}
					Timestamp start = (Timestamp) clasMap.get("start_birthday");
					String startBir = CommonUtils.dateFormat(start, "yyyy-MM-dd");
					startBirthday = CommonUtils.stringToDate(startBir, "yyyy-MM-dd");
					
					Timestamp end = (Timestamp) clasMap.get("end_birthday");
					String endBir = CommonUtils.dateFormat(end, "yyyy-MM-dd");
					endBirthday = CommonUtils.stringToDate(endBir, "yyyy-MM-dd");
					classUnsetTime = (String) clasMap.get("class_unset_time");

				}
				//验证该学生是否在当前班级
				for (Map<String, Object> stu : stuList) {
					Integer stuClasId = (Integer) stu.get("clas_id");
					Integer studId = (Integer) stu.get("stud_id");
					if (stuClasId != null) {
						if (stuClasId.equals(clasId)) {
							//判断当前学员在班级下的学员状态  退费已完成或 报名已作废  这两种状态下的学员可插班  条件为班级id和学员id
							//"8", "退费已完成"   "4", "报名已作废"
							List<Map<String, Object>> list = classService.getStudentInfoByClasIdAndStudId(clasId, studId, "exist");
							if (list != null && list.size() > 0) {
								return ResultEx.error(Constant.ERROR_CODE , "该学生已在该班级！", returnMap);
							}
						}
					}
				}
				//① 判断当前班级是否有可用名额
				if ( usableNum < 1) {
					promptMessage.append("该班级的名额已满;");
				}
				String idNumber = (String) stuMap.get("user_idnumber");
				//String birthday = CommonUtils.getBirthday(idNumber);
				Date birthdayDate = CommonUtils.stringToDate(birthday, "yyyy-MM-dd");//当前学员的生日
				//② 学员的生日需要在 班级的开始生日和结束生日之间  即：学员生日 > 开始生日   并且   学员生日  < 结束生日
				int flag1 = DateUtil.compareDate(birthdayDate, startBirthday);
				int flag2 = DateUtil.compareDate(birthdayDate, endBirthday);
				if ( flag1 != 1 && flag2 != -1) {
					promptMessage.append("该学生生日不满足班级的起始生日要求;");
				}
				//③ 判断当前班级的上课时间 是否为固定时间  不固定时间不做判断
				if ( null == classUnsetTime ) {//不固定时间为null 该班级是固定时间上课
					//④ 循环判断学员是否在该班级
					//⑤ 循环判断学员在该班的上课时间与该学员在其他班级的上课时间是否冲突
					for (Map<String, Object> stu : stuList) {
						//如果上课星期相等进行判断上课时间是否重复,上课星期不相等即不重复
						if ( classWeek == stu.get("class_week")) {//classWeek：当前班级的上课星期   
							String begin = (String) stu.get("class_begin_time1");
							String over = (String) stu.get("class_over_time1");
							/***
							 * 当前班级的上课时间classBeginTime与在其他班的下课时间比较
							 * 当前班级的上课开始时间大于其他班级的下课结束时间，即不可能重复
							 * 当前班级的下课结束时间小于其他班级的上课开始时间，即不可能重复
							***/
							
							boolean flagTime1 = DateUtil.compTime(classBeginTime1, over);//DateUtil.compareDate(classBeginTime, over);
							boolean flagTime2 = DateUtil.compTime(classOverTime1, begin);//DateUtil.compareDate(classOverTime, begin);
							System.out.println("flagTime1 -" + "kaishi time :" + classBeginTime1 + "- jieshu time :" + over + "- flag :" + flagTime1);
							System.out.println("flagTime2 -" + "jieshu time :" + classOverTime1 + "- kaishi time :" + begin + "- flag :" + flagTime2);
							if (flagTime1 == false && flagTime2 == true) {
								promptMessage.append("该学生选择的班级上课时间与其他班的上课时间冲突;");
							}
						}
					}
				} else {// 固定时间不为null  不进行判断
					
				}
			} else {//学员不在任何班级  可以进行插班
				//根据身份证号码查询当前学员的 姓名身份证号 学员id
				Map<String, Object> stuMap = classService.getStudentInfoByUserIdnumber(orgId, stuIdNumber);
				returnMap.put("stud_name", stuMap.get("stud_name"));
				returnMap.put("user_idnumber", stuMap.get("user_idnumber"));//stud_id
				returnMap.put("stud_id", stuMap.get("stud_id"));
				returnMap.put("user_type", stuMap.get("user_type"));
				return ResultEx.success(promptMessage.toString(), returnMap);
			}
				
		} catch (Exception e) {
			e.printStackTrace();
			log.info("queryByCard Ex : " + e);
			return ResultEx.error(Constant.ERROR_CODE, Constant.ERROR_MSG, "");
		}
		return ResultEx.success(promptMessage.toString(), returnMap);
	}
	/***
	 * 
	 *  @Description: 插班
	 *  @param request
	 *  @param orgId
	 *  @param studName
	 *  @param studId
	 *  @param clasId
	 *  @param clasType
	 *  @param tuitionFee
	 *  @param response
	 *  @param insertPayType 1：立即缴费插班 2：老生续费插班
	 *  @return
	 * @throws IOException 
	 */
	@RequestMapping(value = "/joinClass.htm")
	@ResponseBody
	public Result<?> joinClass(HttpServletRequest request, Integer org_id, String studName, Integer studId, Integer clasId, Integer clasType, String tuitionFee, Integer insertPayType, HttpServletResponse response) throws IOException {
		SessionInfo sessionInfo = this.getSessionInfo(request);
		Teacher tech = this.getTechByUId(sessionInfo.getUserId().toString());
		String userTypeName = tech.getTech_name();
		Integer orgId = org_id;
		if (null == orgId) {
			orgId = sessionInfo.getOrgId();
		}
		Map<String,Object> reqMap = CommonUtils.doParameters(request);
		try {
			classService.joinClass(userTypeName, reqMap, sessionInfo, orgId, studName, studId, clasId, clasType, tuitionFee, insertPayType);
		} catch (Exception e) {
			e.printStackTrace();
			log.info("joinClass Ex : " + e);
			return ResultEx.error(Constant.ERROR_CODE, Constant.ERROR_MSG, "");
		}
		return ResultEx.success("");
	}
	/***
	 * 
	 *  @Description: 删除班级 
	 *  1、 班级下没有学员数据
	 *  2、 班级下的学员数据缴费和退费差额为0。
	 *  @param request
	 *  @param orgId
	 *  @param clasId
	 *  @param response
	 *  @return
	 * @throws Exception 
	 */
	@RequestMapping(value = "/delClass.htm")
	@ResponseBody
	public Result<?> delClass(HttpServletRequest request, Integer org_id, Integer clasId, String clasName, Integer clasType, HttpServletResponse response) throws Exception {
		SessionInfo sessionInfo = this.getSessionInfo(request);
		Integer userTypeId = sessionInfo.getUserId();
		//OrgUser orgUser = this.getOrgUser(request);
		Teacher tech = this.getTechByUId(sessionInfo.getUserId().toString());
		String userTypeName = tech.getTech_name();
		Integer orgId = org_id;
		if (null == orgId) {
			orgId = sessionInfo.getOrgId();
		}
		StringBuffer promptMessage = new StringBuffer();
		try {
			//获取当前班级下的学员数量（6种学员状态 /老生待续费 /名额保留中 /报名待缴费 /缴费已完成/ 退费待审核/ 退费已审核）
			Integer classNum = classService.getClassNum(orgId, clasId);
			if (classNum == 0) {
				//获取当前班级的费用余额
				BigDecimal classFees = classService.getClassFees(orgId, clasId);
				int flag = classFees.compareTo(BigDecimal.ZERO); //和0，Zero比较
				if(flag == 0) {//相等  可以删除班级
					classService.delClass(orgId, clasId);
					//插入操作日志表
					//根据班级Id获取校区id
					Integer camId = classService.getCampusIdByClasId(orgId, clasId);
			        LoggerUtil.save(orgId, camId, clasId, EnumLog.TARGET_TYPE_CLASS.getKey(), clasName, EnumLog.OPERATION_CLASS_DEL.getKey(), EnumLog.OPERATION_CLASS_DEL.getValue() + clasName, Constant.IDENTITY_TEACHER, userTypeId, userTypeName, sessionInfo);
				} else {//不可以
					promptMessage.append("当前班级的费用余额不为零，不可删除该班级;");
					return ResultEx.error(Constant.ERROR_CODE, promptMessage.toString(), "");
				}

			} else {
				promptMessage.append("当前班级还存在学员，不可删除该班级;");
				return ResultEx.error(Constant.ERROR_CODE, promptMessage.toString(), "");
			}
		} catch (Exception e) {
			log.info("delClass Ex : " + e);
			e.printStackTrace();
			return ResultEx.error(Constant.ERROR_CODE, Constant.ERROR_MSG, "");
		}
		return ResultEx.success("");
	}
	/***
	 * 
	 *  @Description: 查询班级下学生列表
	 *  @param request
	 *  @param orgId
	 *  @param clasId
	 *  @param clasName
	 *  @param clasType
	 *  @param camName
	 *  @param classroomName
	 *  @param ageRange
	 *  @param techNames
	 *  @param tuitionFees
	 *  @param classStartDate
	 *  @param classWeek
	 *  @param classBeginTime
	 *  @param classOverTime
	 *  @param classUnsetTime
	 *  @param response
	 *  @return
	 * @throws Exception 
	 */
	@RequestMapping(value = "/student/list.htm")
	@ResponseBody
	public Result<?> getStudentList(HttpServletRequest request, @RequestParam(name = "page", defaultValue = "1") Integer page,
			@RequestParam(name = "limit", defaultValue = Constant.NUM_PER_PCPAGE_STRING) Integer limit, Integer org_id, Integer clasId, 
			HttpServletResponse response) throws Exception {
		Integer orgId = org_id;
		SessionInfo session = this.getSessionInfo(request);
		if (null == orgId) {
			orgId = session.getOrgId();
		}
		@SuppressWarnings("rawtypes")
		Paging<Map> pageClasTech = new Paging<Map>();
		pageClasTech.setPage(page);
		pageClasTech.setLimit(limit);
		String status = null;
		Paging<Map<String, Object>> paging = classService.getStudentListByClasId(orgId, clasId, status, pageClasTech);
		return ResultEx.success(paging);
	}
	
	/***
	 * 
	 *  @Description: 批量导入班级（或学生）
	 *  @param request
	 *  @param orgId
	 *  @param termId
	 *  @param type
	 *  @param clasInfo
	 *  @param response
	 *  @return
	 * @throws Exception 
	 */
	@SuppressWarnings("rawtypes")
	@RequestMapping(value = "/import/classOrStu.htm")
	@ResponseBody
	public Result<?> importClassOrStu(HttpServletRequest request, Integer org_id, Integer termId,  Integer type, MultipartFile file,
			String camIds, HttpSession session, 
			HttpServletResponse response) throws Exception {
		SessionInfo sessionInfo = this.getSessionInfo(request);
		Teacher tech = this.getTechByUId(sessionInfo.getUserId().toString());
		String userTypeName = tech.getTech_name();
		Integer orgId = org_id;
		if (null == orgId) {
			orgId = sessionInfo.getOrgId();
		}
		//MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		//MultipartFile file = multipartRequest.getFile("file");
		if (file == null || file.isEmpty()) {
			return ResultEx.error(Constant.ERROR_CODE, "请选择导入文件;", "");
		}
		long fileSize = file.getSize();
		if (fileSize > Constant.FILE_MAX_SIZE) {
			return ResultEx.error(Constant.ERROR_CODE, "上传文件超过最大限制,文件最大为" + fileSize +"个字节;10485760=10M", "");
		}
		String fileName = file.getOriginalFilename();
		String suffix = fileName.substring(fileName.lastIndexOf(".") + 1);
		if (!"xls".equals(suffix) && !"xlsx".equals(suffix)) {
			return ResultEx.error(Constant.ERROR_CODE, "上传文件只支持xls和xlsx文件后缀;", "");
		}
		InputStream fin = file.getInputStream();
		Workbook wb=null;
		if ("xls".equals(suffix)) {
			wb = new HSSFWorkbook(fin);
		} else if ("xlsx".equals(suffix)) {
			wb = new XSSFWorkbook(fin);
		}
		Map returnMap = new HashMap<>();
		try {
			if (null != type ) {
				if (type == 1) {//导入班级
					//校验导入excel列头是否合法
					String [] columnName = { "班级名称", "班级类别", "所属类目", "所属科目", "所属校区", "所在教学楼", "所在楼层", "所在教室", "班级容量",
							"年龄要求", "起始生日", "结束生日", "总课时数", "开课日期", "上课星期", "上课时间", "下课时间",
							"不固定时间", "学费标准", "职教老师", "联合机构"
							};
					String result = ExcelUtil.verificationClassExcelHeadLine(wb, columnName);
					if (result != null) {
						return ResultEx.error(Constant.ERROR_CODE, result, "");
					}
					returnMap = classService.importClass(wb, columnName, userTypeName, session, sessionInfo, fin, orgId, termId, suffix, camIds);
					//if (0 == Integer.parseInt((String) returnMap.get("total"))) {
						//return ReturnResult.success(-1, "导入班级成功数" + returnMap.get("sucNum") + ",错误数" + returnMap.get("errNum") + ",请下载错误文件进行修改再次上传");
					if (returnMap != null) {
						String code = (String) returnMap.get("code");
						if (code != null) {
							if (code.equals(Consts.REQUEST_SUCCESS)) {
								return ResultEx.success(returnMap);
							} else if (code.equals(Consts.REQUEST_EXCEPTION)) {
								return ResultEx.error(Constant.ERROR_CODE, "无法解析所上传的Excel文件。", "");
							}
						}
					}	
						//}
				} else if (type == 2) {//导入学生
					//验证导入学员的标题头是否合法
					String[] columnName = {"班级名称", "学员名称", "证件号码", "学员状态"};
					String result = ExcelUtil.verificationStudentExcelHeadLine(wb, columnName);
					if (result != null) {
						return ResultEx.error(Constant.ERROR_CODE, result, "");
					}
					returnMap = classService.importStudent(wb, userTypeName, session, sessionInfo, fin, orgId, termId, suffix, camIds);
					if (returnMap != null) {
						String code = (String) returnMap.get("code");
						if (code != null) {
							if (code.equals(Consts.REQUEST_SUCCESS)) {
								return ResultEx.success(returnMap);
							} else if (code.equals(Consts.REQUEST_EXCEPTION)) {
								return ResultEx.error(Constant.ERROR_CODE, "导入文件与导出学员的表格表头不一致，无法导入班级。", "");
							}
						}
					}
					//return ReturnResult.success(-1, "导入学员成功数" + returnMap.get("sucNum") + ",错误数" + returnMap.get("errNum") + ",请下载错误文件进行修改再次上传");
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ResultEx.error(Constant.ERROR_CODE, Constant.ERROR_MSG, "");
		}
		return ResultEx.success(returnMap);
	}
	
	/***
	 * 
	 *  @Description: 下载 学生/班级 导入信息错误列表
	 *  @param request
	 *  @param orgId
	 *  @param termId
	 *  @param type 1:班级  2:学生
	 *  @param session
	 *  @param response
	 *  @return
	 *  @throws IOException
	 *  @throws ParseException
	 */
	@RequestMapping(value = "/download/classOrStu.htm")
	@ResponseBody
	public Result<?> downloadClassOrStu(HttpServletRequest request, Integer org_id, Integer termId,  Integer type, 
			HttpSession session, 
			HttpServletResponse response) throws IOException, ParseException {
		try {
			classService.downloadErrorExcel(session, request, response, type);
		} catch (Exception e) {
			e.printStackTrace();
			log.info("downloadClassOrStu Exe :" + e);
			return ResultEx.error(Constant.ERROR_CODE, Constant.ERROR_MSG, "");
		}
		return ResultEx.success("");
	}
	/***
	 * 
	 *  @Description: 获取学员列表
	 *  @param request
	 *  @param orgId 机构id
	 *  @param clasId 班级id
	 *  @param status 学员状态（2,3,5,6,7）(名额保留中/报名待缴费/缴费已完成/退费待审核/退费已审核)
	 *  @param session
	 *  @param response
	 *  @return
	 */
	@SuppressWarnings("rawtypes")
	@RequestMapping(value = "/classStu.htm")
	@ResponseBody
	public Result<?> getClassStu(HttpServletRequest request, Integer org_id, Integer clasId,  String status, 
			@RequestParam(name = "page", defaultValue = "1") Integer page,
			@RequestParam(name = "limit", defaultValue = Constant.NUM_PER_PCPAGE_STRING) Integer limit,
			HttpSession session, 
			HttpServletResponse response) {
		SessionInfo sessionInfo = this.getSessionInfo(request);
		Integer orgId = org_id;
		if (null == orgId) {
			orgId = sessionInfo.getOrgId();
		}
		Paging<Map> pageMap = new Paging<Map>();
		pageMap.setPage(page);
		pageMap.setLimit(limit);
		Paging<Map<String, Object>> stuMap = null;		 
		status = Consts.STUD_STATUS_1OLD_TO_PAY + "," +Consts.STUD_STATUS_2QUOTA_RESERVED + "," +  Consts.STUD_STATUS_3SIGNUP_TO_PAY + "," + Consts.STUD_STATUS_5PAID + "," + Consts.STUD_STATUS_6REFUND_TO_AUDIT + "," + Consts.STUD_STATUS_7REFUND_AUDITED;//"2,3,5,6,7";
		try {
			log.info("-------------------: " + status);
			stuMap = classService.getStudentListByClasId(orgId, clasId, status, pageMap);
		} catch (Exception e) {
			e.printStackTrace();
			log.info("getClassStu Exe :" + e);
			return ResultEx.error(Constant.ERROR_CODE, Constant.ERROR_MSG, "");
		}
		return ResultEx.success(stuMap);
	}
	/***
	 * 
	 *  @Description: 统计当前班级学员列表的人数和学费数
	 *  @param request
	 *  @param org_id
	 *  @param clasId
	 *  @return
	 */
	@RequestMapping(value = "statistics/stulist.htm")
	@ResponseBody
	public Result<?> getStatisticsStuList(HttpServletRequest request, 
			Integer org_id, Integer clasId) {
		SessionInfo sessionInfo = this.getSessionInfo(request);
		Integer orgId = org_id;
		if (null == orgId) {
			orgId = sessionInfo.getOrgId();
		}
		Map<String, Object> returnMap =  new HashMap<String, Object>();
		try {
			returnMap =  classService.getStatisticsStuList(orgId, clasId);
		} catch (Exception e) {
			e.printStackTrace();
			log.info("getStatisticsStuList Ex : " + e);
			return ResultEx.error(Constant.ERROR_CODE, Constant.ERROR_MSG, "");
		}
		return ResultEx.success(returnMap);
	}
	
	/***
	 * 
	 *  @Description: 统计当前班级学员列表的人数和学费数
	 *  @param request
	 *  @param org_id
	 *  @param clasId
	 *  @return
	 */
	@RequestMapping(value = "test.htm")
	@ResponseBody
	public Result<?> getTest(HttpServletRequest request, 
			Integer org_id, String camIds) {
		SessionInfo sessionInfo = this.getSessionInfo(request);
		Integer orgId = org_id;
		if (null == orgId) {
			orgId = sessionInfo.getOrgId();
		}
		Map<String, Integer> returnMap =  new HashMap<String, Integer>();
		try {
			returnMap =  classService.getCampus(orgId, camIds);
		} catch (Exception e) {
			e.printStackTrace();
			log.info("getStatisticsStuList Ex : " + e);
			return ResultEx.error(Constant.ERROR_CODE, Constant.ERROR_MSG, "");
		}
		return ResultEx.success(returnMap);
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "test1.htm")
	@ResponseBody
	public Result<?> getTest1(HttpServletRequest request, 
			Integer org_id, Integer termId, Integer clasType, String camIds) {
		SessionInfo sessionInfo = this.getSessionInfo(request);
		Integer orgId = org_id;
		if (null == orgId) {
			orgId = sessionInfo.getOrgId();
		}
		Map<String, Integer> returnMap =  new HashMap<String, Integer>();
		try {
			returnMap =  classService.getClassListByTerm(orgId, termId, clasType, camIds);
		} catch (Exception e) {
			e.printStackTrace();
			log.info("getStatisticsStuList Ex : " + e);
			return ResultEx.error(Constant.ERROR_CODE, Constant.ERROR_MSG, "");
		}
		return ResultEx.success(returnMap);
	}
	
	@SuppressWarnings("rawtypes")
	@RequestMapping(value = "/test3.htm")
	@ResponseBody
	public Result<?> getTest3(HttpServletRequest request, Integer org_id, Integer clasId,  String status, 
			@RequestParam(name = "page", defaultValue = "1") Integer page,
			@RequestParam(name = "limit", defaultValue = Constant.NUM_PER_PCPAGE_STRING) Integer limit,
			HttpSession session, 
			HttpServletResponse response) {
		SessionInfo sessionInfo = this.getSessionInfo(request);
		Integer orgId = org_id;
		if (null == orgId) {
			orgId = sessionInfo.getOrgId();
		}
		Paging<Map> pageMap = new Paging<Map>();
		pageMap.setPage(page);
		pageMap.setLimit(limit);
		Paging<Map<String, Object>> stuMap = null;
		try {
			stuMap = classService.getStudentListByClasId(orgId, clasId, status, pageMap);
		} catch (Exception e) {
			e.printStackTrace();
			log.info("getClassStu Exe :" + e);
			return ResultEx.error(Constant.ERROR_CODE, Constant.ERROR_MSG, "");
		}
		return ResultEx.success(stuMap);
	}
	
	@RequestMapping(value = "test4.htm")
	@ResponseBody
	public Result<?> getMyCoucher(HttpServletRequest request, 
			Integer org_id, Integer studId, String userIdnumber, String techName, Integer clasId) {
		SessionInfo sessionInfo = this.getSessionInfo(request);
		Integer orgId = org_id;
		if (null == orgId) {
			orgId = sessionInfo.getOrgId();
		}
		Map<String, Object> list =  null;
		try {
			list =  classService.getMyCoucher(orgId, studId, userIdnumber, techName, clasId);
		} catch (Exception e) {
			e.printStackTrace();
			log.info("getStatisticsStuList Ex : " + e);
			return ResultEx.error(Constant.ERROR_CODE, Constant.ERROR_MSG, "");
		}
		return ResultEx.success(list);
	}
}

